{"ast":null,"code":"var Archtype;\n\n(function (Archtype) {\n  Archtype[Archtype[\"Object\"] = 0] = \"Object\";\n  Archtype[Archtype[\"Array\"] = 1] = \"Array\";\n  Archtype[Archtype[\"Map\"] = 2] = \"Map\";\n  Archtype[Archtype[\"Set\"] = 3] = \"Set\";\n})(Archtype || (Archtype = {}));\n\nvar ProxyType;\n\n(function (ProxyType) {\n  ProxyType[ProxyType[\"ProxyObject\"] = 0] = \"ProxyObject\";\n  ProxyType[ProxyType[\"ProxyArray\"] = 1] = \"ProxyArray\";\n  ProxyType[ProxyType[\"ES5Object\"] = 2] = \"ES5Object\";\n  ProxyType[ProxyType[\"ES5Array\"] = 3] = \"ES5Array\";\n  ProxyType[ProxyType[\"Map\"] = 4] = \"Map\";\n  ProxyType[ProxyType[\"Set\"] = 5] = \"Set\";\n})(ProxyType || (ProxyType = {}));\n\nvar obj;\nvar hasSymbol = typeof Symbol !== \"undefined\";\nvar hasMap = typeof Map !== \"undefined\";\nvar hasSet = typeof Set !== \"undefined\";\n/**\r\n * The sentinel value returned by producers to replace the draft with undefined.\r\n */\n\nvar NOTHING = hasSymbol ? Symbol(\"immer-nothing\") : (obj = {}, obj[\"immer-nothing\"] = true, obj);\n/**\r\n * To let Immer treat your class instances as plain immutable objects\r\n * (albeit with a custom prototype), you must define either an instance property\r\n * or a static property on each of your custom classes.\r\n *\r\n * Otherwise, your class instance will never be drafted, which means it won't be\r\n * safe to mutate in a produce callback.\r\n */\n\nvar DRAFTABLE = hasSymbol ? Symbol(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = hasSymbol ? Symbol(\"immer-state\") : \"__$immer_state\";\nvar iteratorSymbol = hasSymbol ? Symbol.iterator : \"@@iterator\";\n/** Returns true if the given value is an Immer draft */\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n/** Returns true if the given value can be drafted by Immer */\n\n\nfunction isDraftable(value) {\n  if (!value) {\n    return false;\n  }\n\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);\n}\n\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n\n  var proto = Object.getPrototypeOf(value);\n  return !proto || proto === Object.prototype;\n}\n/** Get the underlying object that is represented by the given draft */\n\n\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n}\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nObject.getOwnPropertyNames;\n\nfunction each(obj, iter) {\n  if (getArchtype(obj) === Archtype.Object) {\n    ownKeys(obj).forEach(function (key) {\n      return iter(key, obj[key], obj);\n    });\n  } else {\n    obj.forEach(function (entry, index) {\n      return iter(index, entry, obj);\n    });\n  }\n}\n\nfunction isEnumerable(base, prop) {\n  var desc = Object.getOwnPropertyDescriptor(base, prop);\n  return desc && desc.enumerable ? true : false;\n}\n\nfunction getArchtype(thing) {\n  /* istanbul ignore next */\n  if (!thing) {\n    die();\n  }\n\n  if (thing[DRAFT_STATE]) {\n    switch (thing[DRAFT_STATE].type) {\n      case ProxyType.ES5Object:\n      case ProxyType.ProxyObject:\n        return Archtype.Object;\n\n      case ProxyType.ES5Array:\n      case ProxyType.ProxyArray:\n        return Archtype.Array;\n\n      case ProxyType.Map:\n        return Archtype.Map;\n\n      case ProxyType.Set:\n        return Archtype.Set;\n    }\n  }\n\n  return Array.isArray(thing) ? Archtype.Array : isMap(thing) ? Archtype.Map : isSet(thing) ? Archtype.Set : Archtype.Object;\n}\n\nfunction has(thing, prop) {\n  return getArchtype(thing) === Archtype.Map ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\n\nfunction get(thing, prop) {\n  // @ts-ignore\n  return getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop];\n}\n\nfunction set(thing, propOrOldValue, value) {\n  switch (getArchtype(thing)) {\n    case Archtype.Map:\n      thing.set(propOrOldValue, value);\n      break;\n\n    case Archtype.Set:\n      thing.delete(propOrOldValue);\n      thing.add(value);\n      break;\n\n    default:\n      thing[propOrOldValue] = value;\n  }\n}\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction isMap(target) {\n  return hasMap && target instanceof Map;\n}\n\nfunction isSet(target) {\n  return hasSet && target instanceof Set;\n}\n\nfunction latest(state) {\n  return state.copy || state.base;\n}\n\nfunction shallowCopy(base, invokeGetters) {\n  if (invokeGetters === void 0) invokeGetters = false;\n\n  if (Array.isArray(base)) {\n    return base.slice();\n  }\n\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n    var value = desc.value;\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\n\nfunction freeze(obj, deep) {\n  if (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) {\n    return;\n  }\n\n  var type = getArchtype(obj);\n\n  if (type === Archtype.Set) {\n    obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n  } else if (type === Archtype.Map) {\n    obj.set = obj.clear = obj.delete = dontMutateFrozenCollections;\n  }\n\n  Object.freeze(obj);\n\n  if (deep) {\n    each(obj, function (_, value) {\n      return freeze(value, true);\n    });\n  }\n}\n\nfunction dontMutateFrozenCollections() {\n  throw new Error(\"This object has been frozen and should not be mutated\");\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n/* istanbul ignore next */\n\n\nfunction die() {\n  throw new Error(\"Illegal state, please file a bug\");\n}\n/** Each scope represents a `produce` call. */\n\n\nvar ImmerScope = function ImmerScope(parent, immer) {\n  this.drafts = [];\n  this.parent = parent;\n  this.immer = immer; // Whenever the modified draft contains a draft from another scope, we\n  // need to prevent auto-freezing so the unowned draft can be finalized.\n\n  this.canAutoFreeze = true;\n};\n\nImmerScope.prototype.usePatches = function usePatches(patchListener) {\n  if (patchListener) {\n    this.patches = [];\n    this.inversePatches = [];\n    this.patchListener = patchListener;\n  }\n};\n\nImmerScope.prototype.revoke = function revoke$1() {\n  this.leave();\n  this.drafts.forEach(revoke); // @ts-ignore\n\n  this.drafts = null;\n};\n\nImmerScope.prototype.leave = function leave() {\n  if (this === ImmerScope.current) {\n    ImmerScope.current = this.parent;\n  }\n};\n\nImmerScope.enter = function enter(immer) {\n  var scope = new ImmerScope(ImmerScope.current, immer);\n  ImmerScope.current = scope;\n  return scope;\n};\n\nfunction revoke(draft) {\n  var state = draft[DRAFT_STATE];\n\n  if (state.type === ProxyType.ProxyObject || state.type === ProxyType.ProxyArray) {\n    state.revoke();\n  } else {\n    state.revoked = true;\n  }\n}\n\nfunction willFinalizeES5(scope, result, isReplaced) {\n  scope.drafts.forEach(function (draft) {\n    draft[DRAFT_STATE].finalizing = true;\n  });\n\n  if (!isReplaced) {\n    if (scope.patches) {\n      markChangesRecursively(scope.drafts[0]);\n    } // This is faster when we don't care about which attributes changed.\n\n\n    markChangesSweep(scope.drafts);\n  } // When a child draft is returned, look for changes.\n  else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n      markChangesSweep(scope.drafts);\n    }\n}\n\nfunction createES5Proxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n  each(draft, function (prop) {\n    proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n  });\n  var state = {\n    type: isArray ? ProxyType.ES5Array : ProxyType.ES5Object,\n    scope: parent ? parent.scope : ImmerScope.current,\n    modified: false,\n    finalizing: false,\n    finalized: false,\n    assigned: {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    copy: null,\n    revoked: false,\n    isManual: false\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  return draft;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n\n  if (state && !state.finalizing) {\n    state.finalizing = true;\n    var value = draft[prop];\n    state.finalizing = false;\n    return value;\n  }\n\n  return draft[prop];\n}\n\nfunction get$1(state, prop) {\n  assertUnrevoked(state);\n  var value = peek(latest(state), prop);\n\n  if (state.finalizing) {\n    return value;\n  } // Create a draft if the value is unmodified.\n\n\n  if (value === peek(state.base, prop) && isDraftable(value)) {\n    prepareCopy(state); // @ts-ignore\n\n    return state.copy[prop] = state.scope.immer.createProxy(value, state);\n  }\n\n  return value;\n}\n\nfunction set$1(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(value, peek(latest(state), prop))) {\n      return;\n    }\n\n    markChangedES5(state);\n    prepareCopy(state);\n  } // @ts-ignore\n\n\n  state.copy[prop] = value;\n}\n\nfunction markChangedES5(state) {\n  if (!state.modified) {\n    state.modified = true;\n\n    if (state.parent) {\n      markChangedES5(state.parent);\n    }\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) {\n    state.copy = clonePotentialDraft(state.base);\n  }\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n} // property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\n\n\nvar descriptors = {};\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n      get: function get$1$1() {\n        return get$1(this[DRAFT_STATE], prop);\n      },\n      set: function set$1$1(value) {\n        set$1(this[DRAFT_STATE], prop, value);\n      }\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) {\n    throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(latest(state)));\n  }\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(drafts) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = drafts.length - 1; i >= 0; i--) {\n    var state = drafts[i][DRAFT_STATE];\n\n    if (!state.modified) {\n      switch (state.type) {\n        case ProxyType.ES5Array:\n          if (hasArrayChanges(state)) {\n            markChangedES5(state);\n          }\n\n          break;\n\n        case ProxyType.ES5Object:\n          if (hasObjectChanges(state)) {\n            markChangedES5(state);\n          }\n\n          break;\n      }\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || typeof object !== \"object\") {\n    return;\n  }\n\n  var state = object[DRAFT_STATE];\n\n  if (!state) {\n    return;\n  }\n\n  var base = state.base;\n  var draft = state.draft;\n  var assigned = state.assigned;\n  var type = state.type;\n\n  if (type === ProxyType.ES5Object) {\n    // Look for added keys.\n    // TODO: looks quite duplicate to hasObjectChanges,\n    // probably there is a faster way to detect changes, as sweep + recurse seems to do some\n    // unnecessary work.\n    // also: probably we can store the information we detect here, to speed up tree finalization!\n    each(draft, function (key) {\n      if (key === DRAFT_STATE) {\n        return;\n      } // The `undefined` check is a fast path for pre-existing keys.\n\n\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChangedES5(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    each(base, function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChangedES5(state);\n      }\n    });\n  } else if (type === ProxyType.ES5Array && hasArrayChanges(state)) {\n    markChangedES5(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) {\n        assigned[i] = false;\n      }\n    } else {\n      for (var i$1 = base.length; i$1 < draft.length; i$1++) {\n        assigned[i$1] = true;\n      }\n    }\n\n    for (var i$2 = 0; i$2 < draft.length; i$2++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[i$2] === undefined) {\n        markChangesRecursively(draft[i$2]);\n      }\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base;\n  var draft = state.draft; // Search for added keys and changed keys. Start at the back, because\n  // non-numeric keys are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n    if (baseValue === undefined && !has(base, key)) {\n      return true;\n    } // Once a base key is deleted, future changes go undetected, because its\n    // descriptor is erased. This branch detects any missed changes.\n    else {\n        var value = draft[key];\n        var state$1 = value && value[DRAFT_STATE];\n\n        if (state$1 ? state$1.base !== baseValue : !is(value, baseValue)) {\n          return true;\n        }\n      }\n  } // At this point, no keys were added or changed.\n  // Compare key count to determine if keys were deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n\n  if (draft.length !== state.base.length) {\n    return true;\n  } // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) {\n    return true;\n  } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n\n  return false;\n}\n/**\r\n * Returns a new draft of the `base` object.\r\n *\r\n * The second argument is the parent draft-state (used internally).\r\n */\n\n\nfunction createProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var state = {\n    type: isArray ? ProxyType.ProxyArray : ProxyType.ProxyObject,\n    // Track which produce call this is associated with.\n    scope: parent ? parent.scope : ImmerScope.current,\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null,\n    isManual: false\n  }; // the traps must target something, a bit like the 'real' base.\n  // but also, we need to be able to determine from the target what the relevant state is\n  // (to avoid creating traps per instance to capture the state in closure,\n  // and to avoid creating weird hidden properties as well)\n  // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n  // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\n  var target = state;\n  var traps = objectTraps;\n\n  if (isArray) {\n    target = [state];\n    traps = arrayTraps;\n  } // TODO: optimization: might be faster, cheaper if we created a non-revocable proxy\n  // and administrate revoking ourselves\n\n\n  var ref = Proxy.revocable(target, traps);\n  var revoke = ref.revoke;\n  var proxy = ref.proxy;\n  state.draft = proxy;\n  state.revoke = revoke;\n  return proxy;\n}\n/**\r\n * Object drafts\r\n */\n\n\nvar objectTraps = {\n  get: function get(state, prop) {\n    if (prop === DRAFT_STATE) {\n      return state;\n    }\n\n    var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n    if (!state.modified && has(drafts, prop)) {\n      return drafts[prop];\n    }\n\n    var value = latest(state)[prop];\n\n    if (state.finalized || !isDraftable(value)) {\n      return value;\n    } // Check for existing draft in modified state.\n\n\n    if (state.modified) {\n      // Assigned values are never drafted. This catches any drafts we created, too.\n      if (value !== peek$1(state.base, prop)) {\n        return value;\n      } // Store drafts on the copy (when one exists).\n      // @ts-ignore\n\n\n      drafts = state.copy;\n    }\n\n    return drafts[prop] = state.scope.immer.createProxy(value, state);\n  },\n  has: function has(state, prop) {\n    return prop in latest(state);\n  },\n  ownKeys: function ownKeys(state) {\n    return Reflect.ownKeys(latest(state));\n  },\n  set: function set(state, prop\n  /* strictly not, but helps TS */\n  , value) {\n    if (!state.modified) {\n      var baseValue = peek$1(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to\n      // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n      // values may be drafts, but falsy values are never drafts.\n\n      var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;\n\n      if (isUnchanged) {\n        return true;\n      }\n\n      prepareCopy$1(state);\n      markChanged(state);\n    }\n\n    state.assigned[prop] = true; // @ts-ignore\n\n    state.copy[prop] = value;\n    return true;\n  },\n  deleteProperty: function deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (peek$1(state.base, prop) !== undefined || prop in state.base) {\n      state.assigned[prop] = false;\n      prepareCopy$1(state);\n      markChanged(state);\n    } else if (state.assigned[prop]) {\n      // if an originally not assigned property was deleted\n      delete state.assigned[prop];\n    } // @ts-ignore\n\n\n    if (state.copy) {\n      delete state.copy[prop];\n    }\n\n    return true;\n  },\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n  // the same guarantee in ES5 mode.\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {\n    var owner = latest(state);\n    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n    if (desc) {\n      desc.writable = true;\n      desc.configurable = state.type !== ProxyType.ProxyArray || prop !== \"length\";\n    }\n\n    return desc;\n  },\n  defineProperty: function defineProperty() {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n  getPrototypeOf: function getPrototypeOf(state) {\n    return Object.getPrototypeOf(state.base);\n  },\n  setPrototypeOf: function setPrototypeOf() {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n};\n/**\r\n * Array drafts\r\n */\n\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  // @ts-ignore\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\n};\n/**\r\n * Map drafts\r\n */\n// Access a property without creating an Immer draft.\n\n\nfunction peek$1(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var desc = Reflect.getOwnPropertyDescriptor(state ? latest(state) : draft, prop);\n  return desc && desc.value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n\n    if (state.type === ProxyType.ProxyObject || state.type === ProxyType.ProxyArray) {\n      var copy = state.copy = shallowCopy(state.base);\n      each(state.drafts, function (key, value) {\n        // @ts-ignore\n        copy[key] = value;\n      });\n      state.drafts = undefined;\n    }\n\n    if (state.parent) {\n      markChanged(state.parent);\n    }\n  }\n}\n\nfunction prepareCopy$1(state) {\n  if (!state.copy) {\n    state.copy = shallowCopy(state.base);\n  }\n}\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  switch (state.type) {\n    case ProxyType.ProxyObject:\n    case ProxyType.ES5Object:\n    case ProxyType.Map:\n      return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n\n    case ProxyType.ES5Array:\n    case ProxyType.ProxyArray:\n      return generateArrayPatches(state, basePath, patches, inversePatches);\n\n    case ProxyType.Set:\n      return generateSetPatches(state, basePath, patches, inversePatches);\n  }\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var assign, assign$1;\n  var base = state.base;\n  var assigned = state.assigned;\n  var copy = state.copy;\n  /* istanbul ignore next */\n\n  if (!copy) {\n    die();\n  } // Reduce complexity by ensuring `base` is never longer.\n\n\n  if (copy.length < base.length) {\n    assign = [copy, base], base = assign[0], copy = assign[1];\n    assign$1 = [inversePatches, patches], patches = assign$1[0], inversePatches = assign$1[1];\n  }\n\n  var delta = copy.length - base.length; // Find the first replaced index.\n\n  var start = 0;\n\n  while (base[start] === copy[start] && start < base.length) {\n    ++start;\n  } // Find the last replaced index. Search from the end to optimize splice patches.\n\n\n  var end = base.length;\n\n  while (end > start && base[end - 1] === copy[end + delta - 1]) {\n    --end;\n  } // Process replaced indices.\n\n\n  for (var i = start; i < end; ++i) {\n    if (assigned[i] && copy[i] !== base[i]) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  }\n\n  var replaceCount = patches.length; // Process added indices.\n\n  for (var i$1 = end + delta - 1; i$1 >= end; --i$1) {\n    var path$1 = basePath.concat([i$1]);\n    patches[replaceCount + i$1 - end] = {\n      op: \"add\",\n      path: path$1,\n      value: copy[i$1]\n    };\n    inversePatches.push({\n      op: \"remove\",\n      path: path$1\n    });\n  }\n} // This is used for both Map objects and normal objects.\n\n\nfunction generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n  var base = state.base;\n  var copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = get(base, key);\n    var value = get(copy, key);\n    var op = !assignedValue ? \"remove\" : has(base, key) ? \"replace\" : \"add\";\n\n    if (origValue === value && op === \"replace\") {\n      return;\n    }\n\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nfunction generateSetPatches(state, basePath, patches, inversePatches) {\n  var base = state.base;\n  var copy = state.copy;\n  var i = 0;\n  base.forEach(function (value) {\n    if (!copy.has(value)) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"remove\",\n        path: path,\n        value: value\n      });\n      inversePatches.unshift({\n        op: \"add\",\n        path: path,\n        value: value\n      });\n    }\n\n    i++;\n  });\n  i = 0;\n  copy.forEach(function (value) {\n    if (!base.has(value)) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"add\",\n        path: path,\n        value: value\n      });\n      inversePatches.unshift({\n        op: \"remove\",\n        path: path,\n        value: value\n      });\n    }\n\n    i++;\n  });\n}\n\nfunction applyPatches(draft, patches) {\n  patches.forEach(function (patch) {\n    var path = patch.path;\n    var op = patch.op;\n    /* istanbul ignore next */\n\n    if (!path.length) {\n      die();\n    }\n\n    var base = draft;\n\n    for (var i = 0; i < path.length - 1; i++) {\n      base = get(base, path[i]);\n\n      if (!base || typeof base !== \"object\") {\n        throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\"));\n      } // prettier-ignore\n\n    }\n\n    var type = getArchtype(base);\n    var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n    var key = path[path.length - 1];\n\n    switch (op) {\n      case \"replace\":\n        switch (type) {\n          case Archtype.Map:\n            return base.set(key, value);\n\n          /* istanbul ignore next */\n\n          case Archtype.Set:\n            throw new Error('Sets cannot have \"replace\" patches.');\n\n          default:\n            // if value is an object, then it's assigned by reference\n            // in the following add or remove ops, the value field inside the patch will also be modifyed\n            // so we use value from the cloned patch\n            // @ts-ignore\n            return base[key] = value;\n        }\n\n      case \"add\":\n        switch (type) {\n          case Archtype.Array:\n            return base.splice(key, 0, value);\n\n          case Archtype.Map:\n            return base.set(key, value);\n\n          case Archtype.Set:\n            return base.add(value);\n\n          default:\n            return base[key] = value;\n        }\n\n      case \"remove\":\n        switch (type) {\n          case Archtype.Array:\n            return base.splice(key, 1);\n\n          case Archtype.Map:\n            return base.delete(key);\n\n          case Archtype.Set:\n            return base.delete(patch.value);\n\n          default:\n            return delete base[key];\n        }\n\n      default:\n        throw new Error(\"Unsupported patch operation: \" + op);\n    }\n  });\n  return draft;\n}\n\nfunction deepClonePatchValue(obj) {\n  if (!obj || typeof obj !== \"object\") {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(deepClonePatchValue);\n  }\n\n  if (isMap(obj)) {\n    return new Map(Array.from(obj.entries()).map(function (ref) {\n      var k = ref[0];\n      var v = ref[1];\n      return [k, deepClonePatchValue(v)];\n    }));\n  } // Not needed: if (isSet(obj)) return new Set(Array.from(obj.values()).map(deepClone))\n\n\n  var cloned = Object.create(Object.getPrototypeOf(obj));\n\n  for (var key in obj) {\n    cloned[key] = deepClonePatchValue(obj[key]);\n  }\n\n  return cloned;\n}\n/* istanbul ignore next */\n\n\nvar MapBase = typeof Map !== \"undefined\" ? Map : function FakeMap() {};\n\nvar DraftMap =\n/*@__PURE__*/\nfunction (MapBase) {\n  function DraftMap(target, parent) {\n    MapBase.call(this);\n    this[DRAFT_STATE] = {\n      type: ProxyType.Map,\n      parent: parent,\n      scope: parent ? parent.scope : ImmerScope.current,\n      modified: false,\n      finalized: false,\n      copy: undefined,\n      assigned: undefined,\n      base: target,\n      draft: this,\n      isManual: false,\n      revoked: false\n    };\n  }\n\n  if (MapBase) DraftMap.__proto__ = MapBase;\n  DraftMap.prototype = Object.create(MapBase && MapBase.prototype);\n  DraftMap.prototype.constructor = DraftMap;\n  var prototypeAccessors = {\n    size: {\n      configurable: true\n    }\n  };\n\n  prototypeAccessors.size.get = function () {\n    return latest(this[DRAFT_STATE]).size;\n  };\n\n  DraftMap.prototype.has = function has(key) {\n    return latest(this[DRAFT_STATE]).has(key);\n  };\n\n  DraftMap.prototype.set = function set(key, value) {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n\n    if (latest(state).get(key) !== value) {\n      prepareCopy$2(state);\n      state.scope.immer.markChanged(state);\n      state.assigned.set(key, true);\n      state.copy.set(key, value);\n      state.assigned.set(key, true);\n    }\n\n    return this;\n  };\n\n  DraftMap.prototype.delete = function delete$1(key) {\n    if (!this.has(key)) {\n      return false;\n    }\n\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    prepareCopy$2(state);\n    state.scope.immer.markChanged(state);\n    state.assigned.set(key, false);\n    state.copy.delete(key);\n    return true;\n  };\n\n  DraftMap.prototype.clear = function clear() {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    prepareCopy$2(state);\n    state.scope.immer.markChanged(state);\n    state.assigned = new Map();\n\n    for (var i = 0, list = latest(state).keys(); i < list.length; i += 1) {\n      var key = list[i];\n      state.assigned.set(key, false);\n    }\n\n    return state.copy.clear();\n  };\n\n  DraftMap.prototype.forEach = function forEach(cb, thisArg) {\n    var this$1 = this;\n    var state = this[DRAFT_STATE];\n    latest(state).forEach(function (_value, key, _map) {\n      cb.call(thisArg, this$1.get(key), key, this$1);\n    });\n  };\n\n  DraftMap.prototype.get = function get(key) {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    var value = latest(state).get(key);\n\n    if (state.finalized || !isDraftable(value)) {\n      return value;\n    }\n\n    if (value !== state.base.get(key)) {\n      return value; // either already drafted or reassigned\n    } // despite what it looks, this creates a draft only once, see above condition\n\n\n    var draft = state.scope.immer.createProxy(value, state);\n    prepareCopy$2(state);\n    state.copy.set(key, draft);\n    return draft;\n  };\n\n  DraftMap.prototype.keys = function keys() {\n    return latest(this[DRAFT_STATE]).keys();\n  };\n\n  DraftMap.prototype.values = function values() {\n    var this$1 = this;\n    var obj;\n    var iterator = this.keys();\n    return obj = {}, obj[iteratorSymbol] = function () {\n      return this$1.values();\n    }, obj.next = function () {\n      var r = iterator.next();\n      /* istanbul ignore next */\n\n      if (r.done) {\n        return r;\n      }\n\n      var value = this$1.get(r.value);\n      return {\n        done: false,\n        value: value\n      };\n    }, obj;\n  };\n\n  DraftMap.prototype.entries = function entries() {\n    var this$1 = this;\n    var obj;\n    var iterator = this.keys();\n    return obj = {}, obj[iteratorSymbol] = function () {\n      return this$1.entries();\n    }, obj.next = function () {\n      var r = iterator.next();\n      /* istanbul ignore next */\n\n      if (r.done) {\n        return r;\n      }\n\n      var value = this$1.get(r.value);\n      return {\n        done: false,\n        value: [r.value, value]\n      };\n    }, obj;\n  };\n\n  DraftMap.prototype[iteratorSymbol] = function () {\n    return this.entries();\n  };\n\n  Object.defineProperties(DraftMap.prototype, prototypeAccessors);\n  return DraftMap;\n}(MapBase);\n\nfunction proxyMap(target, parent) {\n  return new DraftMap(target, parent);\n}\n\nfunction prepareCopy$2(state) {\n  if (!state.copy) {\n    state.assigned = new Map();\n    state.copy = new Map(state.base);\n  }\n}\n/* istanbul ignore next */\n\n\nvar SetBase = typeof Set !== \"undefined\" ? Set : function FakeSet() {};\n\nvar DraftSet =\n/*@__PURE__*/\nfunction (SetBase) {\n  function DraftSet(target, parent) {\n    SetBase.call(this);\n    this[DRAFT_STATE] = {\n      type: ProxyType.Set,\n      parent: parent,\n      scope: parent ? parent.scope : ImmerScope.current,\n      modified: false,\n      finalized: false,\n      copy: undefined,\n      base: target,\n      draft: this,\n      drafts: new Map(),\n      revoked: false,\n      isManual: false\n    };\n  }\n\n  if (SetBase) DraftSet.__proto__ = SetBase;\n  DraftSet.prototype = Object.create(SetBase && SetBase.prototype);\n  DraftSet.prototype.constructor = DraftSet;\n  var prototypeAccessors = {\n    size: {\n      configurable: true\n    }\n  };\n\n  prototypeAccessors.size.get = function () {\n    return latest(this[DRAFT_STATE]).size;\n  };\n\n  DraftSet.prototype.has = function has(value) {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value\n\n    if (!state.copy) {\n      return state.base.has(value);\n    }\n\n    if (state.copy.has(value)) {\n      return true;\n    }\n\n    if (state.drafts.has(value) && state.copy.has(state.drafts.get(value))) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DraftSet.prototype.add = function add(value) {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n\n    if (state.copy) {\n      state.copy.add(value);\n    } else if (!state.base.has(value)) {\n      prepareCopy$3(state);\n      state.scope.immer.markChanged(state);\n      state.copy.add(value);\n    }\n\n    return this;\n  };\n\n  DraftSet.prototype.delete = function delete$1(value) {\n    if (!this.has(value)) {\n      return false;\n    }\n\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    prepareCopy$3(state);\n    state.scope.immer.markChanged(state);\n    return state.copy.delete(value) || (state.drafts.has(value) ? state.copy.delete(state.drafts.get(value)) :\n    /* istanbul ignore next */\n    false);\n  };\n\n  DraftSet.prototype.clear = function clear() {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    prepareCopy$3(state);\n    state.scope.immer.markChanged(state);\n    return state.copy.clear();\n  };\n\n  DraftSet.prototype.values = function values() {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    prepareCopy$3(state);\n    return state.copy.values();\n  };\n\n  DraftSet.prototype.entries = function entries() {\n    var state = this[DRAFT_STATE];\n    assertUnrevoked(state);\n    prepareCopy$3(state);\n    return state.copy.entries();\n  };\n\n  DraftSet.prototype.keys = function keys() {\n    return this.values();\n  };\n\n  DraftSet.prototype[iteratorSymbol] = function () {\n    return this.values();\n  };\n\n  DraftSet.prototype.forEach = function forEach(cb, thisArg) {\n    var iterator = this.values();\n    var result = iterator.next();\n\n    while (!result.done) {\n      cb.call(thisArg, result.value, result.value, this);\n      result = iterator.next();\n    }\n  };\n\n  Object.defineProperties(DraftSet.prototype, prototypeAccessors);\n  return DraftSet;\n}(SetBase);\n\nfunction proxySet(target, parent) {\n  return new DraftSet(target, parent);\n}\n\nfunction prepareCopy$3(state) {\n  if (!state.copy) {\n    // create drafts for all entries to preserve insertion order\n    state.copy = new Set();\n    state.base.forEach(function (value) {\n      if (isDraftable(value)) {\n        var draft = state.scope.immer.createProxy(value, state);\n        state.drafts.set(value, draft);\n        state.copy.add(draft);\n      } else {\n        state.copy.add(value);\n      }\n    });\n  }\n}\n\nfunction processResult(immer, result, scope) {\n  var baseDraft = scope.drafts[0];\n  var isReplaced = result !== undefined && result !== baseDraft;\n  immer.willFinalize(scope, result, isReplaced);\n\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified) {\n      scope.revoke();\n      throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n    }\n\n    if (isDraftable(result)) {\n      // Finalize the result in case it contains (or is) a subset of the draft.\n      result = finalize(immer, result, scope);\n      maybeFreeze(immer, result);\n    }\n\n    if (scope.patches) {\n      scope.patches.push({\n        op: \"replace\",\n        path: [],\n        value: result\n      });\n      scope.inversePatches.push({\n        op: \"replace\",\n        path: [],\n        value: baseDraft[DRAFT_STATE].base\n      });\n    }\n  } else {\n    // Finalize the base draft.\n    result = finalize(immer, baseDraft, scope, []);\n  }\n\n  scope.revoke();\n\n  if (scope.patches) {\n    scope.patchListener(scope.patches, scope.inversePatches);\n  }\n\n  return result !== NOTHING ? result : undefined;\n}\n\nfunction finalize(immer, draft, scope, path) {\n  var state = draft[DRAFT_STATE];\n\n  if (!state) {\n    if (Object.isFrozen(draft)) {\n      return draft;\n    }\n\n    return finalizeTree(immer, draft, scope);\n  } // Never finalize drafts owned by another scope.\n\n\n  if (state.scope !== scope) {\n    return draft;\n  }\n\n  if (!state.modified) {\n    maybeFreeze(immer, state.base, true);\n    return state.base;\n  }\n\n  if (!state.finalized) {\n    state.finalized = true;\n    finalizeTree(immer, state.draft, scope, path); // We cannot really delete anything inside of a Set. We can only replace the whole Set.\n\n    if (immer.onDelete && state.type !== ProxyType.Set) {\n      // The `assigned` object is unreliable with ES5 drafts.\n      if (immer.useProxies) {\n        var assigned = state.assigned;\n        each(assigned, function (prop, exists) {\n          if (!exists) {\n            immer.onDelete(state, prop);\n          }\n        });\n      } else {\n        var base = state.base;\n        var copy = state.copy;\n        each(base, function (prop) {\n          if (!has(copy, prop)) {\n            immer.onDelete(state, prop);\n          }\n        });\n      }\n    }\n\n    if (immer.onCopy) {\n      immer.onCopy(state);\n    } // At this point, all descendants of `state.copy` have been finalized,\n    // so we can be sure that `scope.canAutoFreeze` is accurate.\n\n\n    if (immer.autoFreeze && scope.canAutoFreeze) {\n      freeze(state.copy, false);\n    }\n\n    if (path && scope.patches) {\n      generatePatches(state, path, scope.patches, scope.inversePatches);\n    }\n  }\n\n  return state.copy;\n}\n\nfunction finalizeTree(immer, root, scope, rootPath) {\n  var state = root[DRAFT_STATE];\n\n  if (state) {\n    if (state.type === ProxyType.ES5Object || state.type === ProxyType.ES5Array) {\n      // Create the final copy, with added keys and without deleted keys.\n      state.copy = shallowCopy(state.draft, true);\n    }\n\n    root = state.copy;\n  }\n\n  each(root, function (key, value) {\n    return finalizeProperty(immer, scope, root, state, root, key, value, rootPath);\n  });\n  return root;\n}\n\nfunction finalizeProperty(immer, scope, root, rootState, parentValue, prop, childValue, rootPath) {\n  if (childValue === parentValue) {\n    throw Error(\"Immer forbids circular references\");\n  } // In the `finalizeTree` method, only the `root` object may be a draft.\n\n\n  var isDraftProp = !!rootState && parentValue === root;\n  var isSetMember = isSet(parentValue);\n\n  if (isDraft(childValue)) {\n    var path = rootPath && isDraftProp && !isSetMember && // Set objects are atomic since they have no keys.\n    !has(rootState.assigned, prop) // Skip deep patches for assigned keys.\n    ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.\n\n    childValue = finalize(immer, childValue, scope, path);\n    set(parentValue, prop, childValue); // Drafts from another scope must prevent auto-freezing.\n\n    if (isDraft(childValue)) {\n      scope.canAutoFreeze = false;\n    }\n  } // Unchanged draft properties are ignored.\n  else if (isDraftProp && is(childValue, get(rootState.base, prop))) {\n      return;\n    } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n    // TODO: the recursion over here looks weird, shouldn't non-draft stuff have it's own recursion?\n    // especially the passing on of root and rootState doesn't make sense...\n    else if (isDraftable(childValue) && !Object.isFrozen(childValue)) {\n        each(childValue, function (key, grandChild) {\n          return finalizeProperty(immer, scope, root, rootState, childValue, key, grandChild, rootPath);\n        });\n        maybeFreeze(immer, childValue);\n      }\n\n  if (isDraftProp && immer.onAssign && !isSetMember) {\n    immer.onAssign(rootState, prop, childValue);\n  }\n}\n\nfunction maybeFreeze(immer, value, deep) {\n  if (deep === void 0) deep = false;\n\n  if (immer.autoFreeze && !isDraft(value)) {\n    freeze(value, deep);\n  }\n}\n/* istanbul ignore next */\n\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" :\n  /* istanbul ignore next */\n  verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\n\nvar Immer = function Immer(config) {\n  var this$1 = this;\n  this.useProxies = false;\n  this.autoFreeze = false;\n  each(configDefaults, function (key, value) {\n    var _a, _b; // @ts-ignore\n\n\n    this$1[key] = (_b = (_a = config) === null || _a === void 0 ? void 0 : _a[key], _b !== null && _b !== void 0 ? _b : value);\n  });\n  this.setUseProxies(this.useProxies);\n  this.produce = this.produce.bind(this);\n  this.produceWithPatches = this.produceWithPatches.bind(this);\n};\n/**\r\n * The `produce` function takes a value and a \"recipe function\" (whose\r\n * return value often depends on the base state). The recipe function is\r\n * free to mutate its first argument however it wants. All mutations are\r\n * only ever applied to a __copy__ of the base state.\r\n *\r\n * Pass only a function to create a \"curried producer\" which relieves you\r\n * from passing the recipe function every time.\r\n *\r\n * Only plain objects and arrays are made mutable. All other objects are\r\n * considered uncopyable.\r\n *\r\n * Note: This function is __bound__ to its `Immer` instance.\r\n *\r\n * @param {any} base - the initial state\r\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n * @returns {any} a new state, or the initial state if nothing was modified\r\n */\n\n\nImmer.prototype.produce = function produce(base, recipe, patchListener) {\n  var this$1 = this; // curried invocation\n\n  if (typeof base === \"function\" && typeof recipe !== \"function\") {\n    var defaultBase = recipe;\n    recipe = base;\n    var self = this;\n    return function curriedProduce(base) {\n      var this$1 = this;\n      if (base === void 0) base = defaultBase;\n      var args = [],\n          len = arguments.length - 1;\n\n      while (len-- > 0) args[len] = arguments[len + 1];\n\n      return self.produce(base, function (draft) {\n        return recipe.call.apply(recipe, [this$1, draft].concat(args));\n      }); // prettier-ignore\n    };\n  } // prettier-ignore\n\n\n  {\n    if (typeof recipe !== \"function\") {\n      throw new Error(\"The first or second argument to `produce` must be a function\");\n    }\n\n    if (patchListener !== undefined && typeof patchListener !== \"function\") {\n      throw new Error(\"The third argument to `produce` must be a function or undefined\");\n    }\n  }\n  var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n  if (isDraftable(base)) {\n    var scope = ImmerScope.enter(this);\n    var proxy = this.createProxy(base, undefined);\n    var hasError = true;\n\n    try {\n      result = recipe(proxy);\n      hasError = false;\n    } finally {\n      // finally instead of catch + rethrow better preserves original stack\n      if (hasError) {\n        scope.revoke();\n      } else {\n        scope.leave();\n      }\n    }\n\n    if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n      return result.then(function (result) {\n        scope.usePatches(patchListener);\n        return processResult(this$1, result, scope);\n      }, function (error) {\n        scope.revoke();\n        throw error;\n      });\n    }\n\n    scope.usePatches(patchListener);\n    return processResult(this, result, scope);\n  } else {\n    result = recipe(base);\n\n    if (result === NOTHING) {\n      return undefined;\n    }\n\n    if (result === undefined) {\n      result = base;\n    }\n\n    maybeFreeze(this, result, true);\n    return result;\n  }\n};\n\nImmer.prototype.produceWithPatches = function produceWithPatches(arg1, arg2, arg3) {\n  var this$1 = this;\n\n  if (typeof arg1 === \"function\") {\n    return function (state) {\n      var args = [],\n          len = arguments.length - 1;\n\n      while (len-- > 0) args[len] = arguments[len + 1];\n\n      return this$1.produceWithPatches(state, function (draft) {\n        return arg1.apply(void 0, [draft].concat(args));\n      });\n    };\n  } // non-curried form\n\n  /* istanbul ignore next */\n\n\n  if (arg3) {\n    die();\n  }\n\n  var patches, inversePatches;\n  var nextState = this.produce(arg1, arg2, function (p, ip) {\n    patches = p;\n    inversePatches = ip;\n  });\n  return [nextState, patches, inversePatches];\n};\n\nImmer.prototype.createDraft = function createDraft(base) {\n  if (!isDraftable(base)) {\n    throw new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\"); // prettier-ignore\n  }\n\n  var scope = ImmerScope.enter(this);\n  var proxy = this.createProxy(base, undefined);\n  proxy[DRAFT_STATE].isManual = true;\n  scope.leave();\n  return proxy;\n};\n\nImmer.prototype.finishDraft = function finishDraft(draft, patchListener) {\n  var state = draft && draft[DRAFT_STATE];\n\n  if (!state || !state.isManual) {\n    throw new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\"); // prettier-ignore\n  }\n\n  if (state.finalized) {\n    throw new Error(\"The given draft is already finalized\"); // prettier-ignore\n  }\n\n  var scope = state.scope;\n  scope.usePatches(patchListener);\n  return processResult(this, undefined, scope);\n};\n/**\r\n * Pass true to automatically freeze all copies created by Immer.\r\n *\r\n * By default, auto-freezing is disabled in production.\r\n */\n\n\nImmer.prototype.setAutoFreeze = function setAutoFreeze(value) {\n  this.autoFreeze = value;\n};\n/**\r\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n * always faster than using ES5 proxies.\r\n *\r\n * By default, feature detection is used, so calling this is rarely necessary.\r\n */\n\n\nImmer.prototype.setUseProxies = function setUseProxies(value) {\n  this.useProxies = value;\n};\n\nImmer.prototype.applyPatches = function applyPatches$1(base, patches) {\n  // If a patch replaces the entire state, take that replacement as base\n  // before applying patches\n  var i;\n\n  for (i = patches.length - 1; i >= 0; i--) {\n    var patch = patches[i];\n\n    if (patch.path.length === 0 && patch.op === \"replace\") {\n      base = patch.value;\n      break;\n    }\n  }\n\n  if (isDraft(base)) {\n    // N.B: never hits if some patch a replacement, patches are never drafts\n    return applyPatches(base, patches);\n  } // Otherwise, produce a copy of the base state.\n\n\n  return this.produce(base, function (draft) {\n    return applyPatches(draft, patches.slice(i + 1));\n  });\n};\n\nImmer.prototype.createProxy = function createProxy$1(value, parent) {\n  // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n  var draft = isMap(value) ? proxyMap(value, parent) : isSet(value) ? proxySet(value, parent) : this.useProxies ? createProxy(value, parent) : createES5Proxy(value, parent);\n  var scope = parent ? parent.scope : ImmerScope.current;\n  scope.drafts.push(draft);\n  return draft;\n};\n\nImmer.prototype.willFinalize = function willFinalize(scope, thing, isReplaced) {\n  if (!this.useProxies) {\n    willFinalizeES5(scope, thing, isReplaced);\n  }\n};\n\nImmer.prototype.markChanged = function markChanged$1(state) {\n  if (this.useProxies) {\n    markChanged(state);\n  } else {\n    markChangedES5(state);\n  }\n};\n\nvar immer = new Immer();\n/**\r\n * The `produce` function takes a value and a \"recipe function\" (whose\r\n * return value often depends on the base state). The recipe function is\r\n * free to mutate its first argument however it wants. All mutations are\r\n * only ever applied to a __copy__ of the base state.\r\n *\r\n * Pass only a function to create a \"curried producer\" which relieves you\r\n * from passing the recipe function every time.\r\n *\r\n * Only plain objects and arrays are made mutable. All other objects are\r\n * considered uncopyable.\r\n *\r\n * Note: This function is __bound__ to its `Immer` instance.\r\n *\r\n * @param {any} base - the initial state\r\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\r\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n * @returns {any} a new state, or the initial state if nothing was modified\r\n */\n\nvar produce = immer.produce;\n/**\r\n * Like `produce`, but `produceWithPatches` always returns a tuple\r\n * [nextState, patches, inversePatches] (instead of just the next state)\r\n */\n\nvar produceWithPatches = immer.produceWithPatches.bind(immer);\n/**\r\n * Pass true to automatically freeze all copies created by Immer.\r\n *\r\n * By default, auto-freezing is disabled in production.\r\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\r\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\r\n * always faster than using ES5 proxies.\r\n *\r\n * By default, feature detection is used, so calling this is rarely necessary.\r\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\r\n * Apply an array of Immer patches to the first argument.\r\n *\r\n * This function is a producer, which means copy-on-write is in effect.\r\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\n/**\r\n * Create an Immer draft from the given base state, which may be a draft itself.\r\n * The draft can be modified until you finalize it with the `finishDraft` function.\r\n */\n\nvar createDraft = immer.createDraft.bind(immer);\n/**\r\n * Finalize an Immer draft from a `createDraft` call, returning the base state\r\n * (if no changes were made) or a modified copy. The draft must *not* be\r\n * mutated afterwards.\r\n *\r\n * Pass a function as the 2nd argument to generate Immer patches based on the\r\n * changes that were made.\r\n */\n\nvar finishDraft = immer.finishDraft.bind(immer);\nexport default produce;\nexport { Immer, applyPatches$1 as applyPatches, createDraft, finishDraft, DRAFTABLE as immerable, isDraft, isDraftable, NOTHING as nothing, original, produce, produceWithPatches, setAutoFreeze, setUseProxies };","map":{"version":3,"sources":["../src/types.ts","../src/common.ts","../src/scope.ts","../src/es5.ts","../src/proxy.ts","../src/patches.ts","../src/map.ts","../src/set.ts","../src/finalize.ts","../src/immer.ts","../src/index.ts"],"names":["Archtype","ProxyType","const","hasSymbol","hasMap","hasSet","NOTHING","Symbol","DRAFTABLE","DRAFT_STATE","iteratorSymbol","isDraft","value","isDraftable","isPlainObject","Array","isMap","isSet","proto","Object","original","ownKeys","Reflect","obj","each","iter","getArchtype","key","isEnumerable","base","prop","desc","thing","die","has","get","set","propOrOldValue","is","x","y","target","latest","state","shallowCopy","invokeGetters","clone","writable","configurable","freeze","deep","type","createHiddenProperty","enumerable","ImmerScope","constructor","parent","immer","usePatches","revoke","leave","enter","scope","draft","willFinalizeES5","result","isReplaced","markChangesRecursively","markChangesSweep","createES5Proxy","isArray","clonePotentialDraft","proxyProperty","modified","finalizing","finalized","assigned","copy","revoked","isManual","assertUnrevoked","peek","prepareCopy","markChangedES5","descriptors","JSON","let","i","drafts","hasArrayChanges","hasObjectChanges","object","keys","baseValue","descriptor","createProxy","traps","proxy","Proxy","objectTraps","isUnchanged","markChanged","deleteProperty","getOwnPropertyDescriptor","owner","defineProperty","getPrototypeOf","setPrototypeOf","arrayTraps","arguments","fn","isNaN","parseInt","generatePatches","basePath","patches","inversePatches","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","delta","start","end","path","op","replaceCount","origValue","applyPatches","patch","deepClonePatchValue","v","cloned","MapBase","DraftMap","size","delete","clear","forEach","cb","this","values","iterator","next","r","done","entries","proxyMap","SetBase","DraftSet","add","proxySet","processResult","baseDraft","finalize","maybeFreeze","finalizeTree","root","finalizeProperty","childValue","Error","isDraftProp","parentValue","isSetMember","rootPath","rootState","configDefaults","useProxies","autoFreeze","process","verifyMinified","onAssign","onDelete","onCopy","Immer","config","produce","defaultBase","self","recipe","call","patchListener","hasError","error","produceWithPatches","arg1","nextState","createDraft","finishDraft","setAutoFreeze","setUseProxies","willFinalize"],"mappings":"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","sourcesContent":["import {Nothing, DRAFT_STATE} from \"./common\"\nimport {SetState} from \"./set\"\nimport {MapState} from \"./map\"\nimport {ProxyObjectState, ProxyArrayState} from \"./proxy\"\nimport {ES5ObjectState, ES5ArrayState} from \"./es5\"\nimport {ImmerScope} from \"./scope\"\n\nexport type Objectish = AnyObject | AnyArray | AnyMap | AnySet\nexport type ObjectishNoSet = AnyObject | AnyArray | AnyMap\n\nexport type AnyObject = {[key: string]: any}\nexport type AnyArray = Array<any>\nexport type AnySet = Set<any>\nexport type AnyMap = Map<any, any>\nexport enum Archtype {\n\tObject,\n\tArray,\n\tMap,\n\tSet\n}\n\nexport enum ProxyType {\n\tProxyObject,\n\tProxyArray,\n\tES5Object,\n\tES5Array,\n\tMap,\n\tSet\n}\n\nexport interface ImmerBaseState {\n\tparent?: ImmerState\n\tscope: ImmerScope\n\tmodified: boolean\n\tfinalized: boolean\n\tisManual: boolean\n}\n\nexport type ImmerState =\n\t| ProxyObjectState\n\t| ProxyArrayState\n\t| ES5ObjectState\n\t| ES5ArrayState\n\t| MapState\n\t| SetState\n\n// The _internal_ type used for drafts (not to be confused with Draft, which is public facing)\nexport type Drafted<Base = any, T extends ImmerState = ImmerState> = {\n\t[DRAFT_STATE]: T\n} & Base\n\ntype Tail<T extends any[]> = ((...t: T) => any) extends (\n\t_: any,\n\t...tail: infer TT\n) => any\n\t? TT\n\t: []\n\n/** Object types that should never be mapped */\ntype AtomicObject =\n\t| Function\n\t| WeakMap<any, any>\n\t| WeakSet<any>\n\t| Promise<any>\n\t| Date\n\t| RegExp\n\t| Boolean\n\t| Number\n\t| String\n\nexport type Draft<T> = T extends AtomicObject\n\t? T\n\t: T extends Map<infer K, infer V>\n\t? DraftMap<K, V>\n\t: T extends Set<infer V>\n\t? DraftSet<V>\n\t: T extends object\n\t? {-readonly [K in keyof T]: Draft<T[K]>}\n\t: T\n\n// Inline these in ts 3.7\ninterface DraftMap<K, V> extends Map<Draft<K>, Draft<V>> {}\n\n// Inline these in ts 3.7\ninterface DraftSet<V> extends Set<Draft<V>> {}\n\n/** Convert a mutable type into a readonly type */\nexport type Immutable<T> = T extends AtomicObject\n\t? T\n\t: T extends Map<infer K, infer V> // Ideally, but wait for TS 3.7:    ? Omit<ImmutableMap<K, V>, \"set\" | \"delete\" | \"clear\">\n\t? ImmutableMap<K, V>\n\t: T extends Set<infer V> // Ideally, but wait for TS 3.7:    ? Omit<ImmutableSet<V>, \"add\" | \"delete\" | \"clear\">\n\t? ImmutableSet<V>\n\t: T extends object\n\t? {readonly [K in keyof T]: Immutable<T[K]>}\n\t: T\n\ninterface ImmutableMap<K, V> extends Map<Immutable<K>, Immutable<V>> {}\n\ninterface ImmutableSet<V> extends Set<Immutable<V>> {}\n\nexport interface Patch {\n\top: \"replace\" | \"remove\" | \"add\"\n\tpath: (string | number)[]\n\tvalue?: any\n}\n\nexport type PatchListener = (patches: Patch[], inversePatches: Patch[]) => void\n\n/** Converts `nothing` into `undefined` */\ntype FromNothing<T> = T extends Nothing ? undefined : T\n\n/** The inferred return type of `produce` */\nexport type Produced<Base, Return> = Return extends void\n\t? Base\n\t: Return extends Promise<infer Result>\n\t? Promise<Result extends void ? Base : FromNothing<Result>>\n\t: FromNothing<Return>\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport interface IProduce {\n\t/** Curried producer */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe\n\t): <Base extends Immutable<T>>(\n\t\tbase: Base,\n\t\t...rest: Tail<Params>\n\t) => Produced<Base, ReturnType<Recipe>>\n\t//   ^ by making the returned type generic, the actual type of the passed in object is preferred\n\t//     over the type used in the recipe. However, it does have to satisfy the immutable version used in the recipe\n\t//     Note: the type of S is the widened version of T, so it can have more props than T, but that is technically actually correct!\n\n\t/** Curried producer with initial state */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe,\n\t\tinitialState: Immutable<T>\n\t): <Base extends Immutable<T>>(\n\t\tbase?: Base,\n\t\t...rest: Tail<Params>\n\t) => Produced<Base, ReturnType<Recipe>>\n\n\t/** Normal producer */\n\t<Base, D = Draft<Base>, Return = void>(\n\t\tbase: Base,\n\t\trecipe: (draft: D) => Return,\n\t\tlistener?: PatchListener\n\t): Produced<Base, Return>\n}\n\n/**\n * Like `produce`, but instead of just returning the new state,\n * a tuple is returned with [nextState, patches, inversePatches]\n *\n * Like produce, this function supports currying\n */\nexport interface IProduceWithPatches {\n\t/** Curried producer */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe\n\t): <Base extends Immutable<T>>(\n\t\tbase: Base,\n\t\t...rest: Tail<Params>\n\t) => [Produced<Base, ReturnType<Recipe>>, Patch[], Patch[]]\n\t//   ^ by making the returned type generic, the actual type of the passed in object is preferred\n\t//     over the type used in the recipe. However, it does have to satisfy the immutable version used in the recipe\n\t//     Note: the type of S is the widened version of T, so it can have more props than T, but that is technically actually correct!\n\n\t/** Curried producer with initial state */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe,\n\t\tinitialState: Immutable<T>\n\t): <Base extends Immutable<T>>(\n\t\tbase?: Base,\n\t\t...rest: Tail<Params>\n\t) => [Produced<Base, ReturnType<Recipe>>, Patch[], Patch[]]\n\n\t/** Normal producer */\n\t<Base, D = Draft<Base>, Return = void>(\n\t\tbase: Base,\n\t\trecipe: (draft: D) => Return\n\t): [Produced<Base, Return>, Patch[], Patch[]]\n}\n","import {\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tProxyType,\n\tArchtype\n} from \"./types\"\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n\nconst hasSymbol = typeof Symbol !== \"undefined\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\nexport const iteratorSymbol: typeof Symbol.iterator = hasSymbol\n\t? Symbol.iterator\n\t: (\"@@iterator\" as any)\n\n/** Returns true if the given value is an Immer draft */\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\n/** Get the underlying object that is represented by the given draft */\nexport function original<T>(value: Drafted<T>): T | undefined {\n\tif (value && value[DRAFT_STATE]) {\n\t\treturn value[DRAFT_STATE].base as any\n\t}\n\t// otherwise return undefined\n}\n\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\townKeys(obj).forEach(key => iter(key, obj[key], obj))\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\nexport function isEnumerable(base: AnyObject, prop: PropertyKey): boolean {\n\tconst desc = Object.getOwnPropertyDescriptor(base, prop)\n\treturn desc && desc.enumerable ? true : false\n}\n\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tif (!thing) die()\n\tif (thing[DRAFT_STATE]) {\n\t\tswitch ((thing as Drafted)[DRAFT_STATE].type) {\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\t\treturn Archtype.Object\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn Archtype.Array\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn Archtype.Map\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn Archtype.Set\n\t\t}\n\t}\n\treturn Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tswitch (getArchtype(thing)) {\n\t\tcase Archtype.Map:\n\t\t\tthing.set(propOrOldValue, value)\n\t\t\tbreak\n\t\tcase Archtype.Set:\n\t\t\tthing.delete(propOrOldValue)\n\t\t\tthing.add(value)\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthing[propOrOldValue] = value\n\t}\n}\n\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n\nexport function latest(state: ImmerState): any {\n\treturn state.copy || state.base\n}\n\nexport function shallowCopy<T extends AnyObject | AnyArray>(\n\tbase: T,\n\tinvokeGetters?: boolean\n): T\nexport function shallowCopy(base: any, invokeGetters = false) {\n\tif (Array.isArray(base)) return base.slice()\n\tconst clone = Object.create(Object.getPrototypeOf(base))\n\townKeys(base).forEach(key => {\n\t\tif (key === DRAFT_STATE) {\n\t\t\treturn // Never copy over draft state.\n\t\t}\n\t\tconst desc = Object.getOwnPropertyDescriptor(base, key)!\n\t\tlet {value} = desc\n\t\tif (desc.get) {\n\t\t\tif (!invokeGetters) {\n\t\t\t\tthrow new Error(\"Immer drafts cannot have computed properties\")\n\t\t\t}\n\t\t\tvalue = desc.get.call(base)\n\t\t}\n\t\tif (desc.enumerable) {\n\t\t\tclone[key] = value\n\t\t} else {\n\t\t\tObject.defineProperty(clone, key, {\n\t\t\t\tvalue,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t})\n\t\t}\n\t})\n\treturn clone\n}\n\nexport function freeze(obj: any, deep: boolean): void {\n\tif (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) return\n\tconst type = getArchtype(obj)\n\tif (type === Archtype.Set) {\n\t\tobj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t} else if (type === Archtype.Map) {\n\t\tobj.set = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (_, value) => freeze(value, true))\n}\n\nfunction dontMutateFrozenCollections() {\n\tthrow new Error(\"This object has been frozen and should not be mutated\")\n}\n\nexport function createHiddenProperty(\n\ttarget: AnyObject,\n\tprop: PropertyKey,\n\tvalue: any\n) {\n\tObject.defineProperty(target, prop, {\n\t\tvalue: value,\n\t\tenumerable: false,\n\t\twritable: true\n\t})\n}\n\n/* istanbul ignore next */\nexport function die(): never {\n\tthrow new Error(\"Illegal state, please file a bug\")\n}\n","import {DRAFT_STATE} from \"./common\"\nimport {Patch, PatchListener, Drafted, ProxyType} from \"./types\"\nimport {Immer} from \"./immer\"\n\n/** Each scope represents a `produce` call. */\nexport class ImmerScope {\n\tstatic current?: ImmerScope\n\n\tpatches?: Patch[]\n\tinversePatches?: Patch[]\n\tcanAutoFreeze: boolean\n\tdrafts: any[]\n\tparent?: ImmerScope\n\tpatchListener?: PatchListener\n\timmer: Immer\n\n\tconstructor(parent: ImmerScope | undefined, immer: Immer) {\n\t\tthis.drafts = []\n\t\tthis.parent = parent\n\t\tthis.immer = immer\n\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tthis.canAutoFreeze = true\n\t}\n\n\tusePatches(patchListener?: PatchListener) {\n\t\tif (patchListener) {\n\t\t\tthis.patches = []\n\t\t\tthis.inversePatches = []\n\t\t\tthis.patchListener = patchListener\n\t\t}\n\t}\n\n\trevoke() {\n\t\tthis.leave()\n\t\tthis.drafts.forEach(revoke)\n\t\t// @ts-ignore\n\t\tthis.drafts = null\n\t}\n\n\tleave() {\n\t\tif (this === ImmerScope.current) {\n\t\t\tImmerScope.current = this.parent\n\t\t}\n\t}\n\n\tstatic enter(immer: Immer) {\n\t\tconst scope = new ImmerScope(ImmerScope.current, immer)\n\t\tImmerScope.current = scope\n\t\treturn scope\n\t}\n}\n\nfunction revoke(draft: Drafted) {\n\tconst state = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type === ProxyType.ProxyObject ||\n\t\tstate.type === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke()\n\telse state.revoked = true\n}\n","\"use strict\"\nimport {\n\teach,\n\thas,\n\tis,\n\tisDraft,\n\tisDraftable,\n\tisEnumerable,\n\tshallowCopy,\n\tDRAFT_STATE,\n\tlatest,\n\tcreateHiddenProperty\n} from \"./common\"\n\nimport {ImmerScope} from \"./scope\"\nimport {\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tObjectish,\n\tImmerBaseState,\n\tAnyArray,\n\tProxyType\n} from \"./types\"\nimport {MapState} from \"./map\"\nimport {SetState} from \"./set\"\n\ninterface ES5BaseState extends ImmerBaseState {\n\tfinalizing: boolean\n\tassigned: {[key: string]: any}\n\tparent?: ImmerState\n\trevoked: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype: ProxyType.ES5Object\n\tdraft: Drafted<AnyObject, ES5ObjectState>\n\tbase: AnyObject\n\tcopy: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype: ProxyType.ES5Array\n\tdraft: Drafted<AnyObject, ES5ArrayState>\n\tbase: AnyArray\n\tcopy: AnyArray | null\n}\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function willFinalizeES5(\n\tscope: ImmerScope,\n\tresult: any,\n\tisReplaced: boolean\n) {\n\tscope.drafts!.forEach(draft => {\n\t\tdraft[DRAFT_STATE].finalizing = true\n\t})\n\tif (!isReplaced) {\n\t\tif (scope.patches) {\n\t\t\tmarkChangesRecursively(scope.drafts![0])\n\t\t}\n\t\t// This is faster when we don't care about which attributes changed.\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n\t// When a child draft is returned, look for changes.\n\telse if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n}\n\nexport function createES5Proxy<T>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\tconst isArray = Array.isArray(base)\n\tconst draft = clonePotentialDraft(base)\n\n\teach(draft, prop => {\n\t\tproxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n\t})\n\n\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\ttype: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\tmodified: false,\n\t\tfinalizing: false,\n\t\tfinalized: false,\n\t\tassigned: {},\n\t\tparent,\n\t\tbase,\n\t\tdraft,\n\t\tcopy: null,\n\t\trevoked: false,\n\t\tisManual: false\n\t}\n\n\tcreateHiddenProperty(draft, DRAFT_STATE, state)\n\treturn draft\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tif (state && !state.finalizing) {\n\t\tstate.finalizing = true\n\t\tconst value = draft[prop]\n\t\tstate.finalizing = false\n\t\treturn value\n\t}\n\treturn draft[prop]\n}\n\nfunction get(state: ES5State, prop: string | number) {\n\tassertUnrevoked(state)\n\tconst value = peek(latest(state), prop)\n\tif (state.finalizing) return value\n\t// Create a draft if the value is unmodified.\n\tif (value === peek(state.base, prop) && isDraftable(value)) {\n\t\tprepareCopy(state)\n\t\t// @ts-ignore\n\t\treturn (state.copy![prop] = state.scope.immer.createProxy(value, state))\n\t}\n\treturn value\n}\n\nfunction set(state: ES5State, prop: string | number, value: any) {\n\tassertUnrevoked(state)\n\tstate.assigned[prop] = true\n\tif (!state.modified) {\n\t\tif (is(value, peek(latest(state), prop))) return\n\t\tmarkChangedES5(state)\n\t\tprepareCopy(state)\n\t}\n\t// @ts-ignore\n\tstate.copy![prop] = value\n}\n\nexport function markChangedES5(state: ImmerState) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tif (state.parent) markChangedES5(state.parent)\n\t}\n}\n\nfunction prepareCopy(state: ES5State) {\n\tif (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base: Objectish) {\n\tconst state = base && (base as any)[DRAFT_STATE]\n\tif (state) {\n\t\tstate.finalizing = true\n\t\tconst draft = shallowCopy(state.draft, true)\n\t\tstate.finalizing = false\n\t\treturn draft\n\t}\n\treturn shallowCopy(base)\n}\n\n// property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\nconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\nfunction proxyProperty(\n\tdraft: Drafted<any, ES5State>,\n\tprop: string | number,\n\tenumerable: boolean\n) {\n\tlet desc = descriptors[prop]\n\tif (desc) {\n\t\tdesc.enumerable = enumerable\n\t} else {\n\t\tdescriptors[prop] = desc = {\n\t\t\tconfigurable: true,\n\t\t\tenumerable,\n\t\t\tget(this: any) {\n\t\t\t\treturn get(this[DRAFT_STATE], prop)\n\t\t\t},\n\t\t\tset(this: any, value) {\n\t\t\t\tset(this[DRAFT_STATE], prop, value)\n\t\t\t}\n\t\t}\n\t}\n\tObject.defineProperty(draft, prop, desc)\n}\n\nexport function assertUnrevoked(state: ES5State | MapState | SetState) {\n\tif (state.revoked === true)\n\t\tthrow new Error(\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\tJSON.stringify(latest(state))\n\t\t)\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t// The natural order of drafts in the `scope` array is based on when they\n\t// were accessed. By processing drafts in reverse natural order, we have a\n\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t// have changed, we can avoid any traversal of its ancestor nodes.\n\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\tconst state = drafts[i][DRAFT_STATE]\n\t\tif (!state.modified) {\n\t\t\tswitch (state.type) {\n\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\tif (hasArrayChanges(state)) markChangedES5(state)\n\t\t\t\t\tbreak\n\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\tif (hasObjectChanges(state)) markChangedES5(state)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction markChangesRecursively(object: any) {\n\tif (!object || typeof object !== \"object\") return\n\tconst state = object[DRAFT_STATE]\n\tif (!state) return\n\tconst {base, draft, assigned, type} = state\n\tif (type === ProxyType.ES5Object) {\n\t\t// Look for added keys.\n\t\t// TODO: looks quite duplicate to hasObjectChanges,\n\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t// unnecessary work.\n\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\teach(draft, key => {\n\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (base[key] === undefined && !has(base, key)) {\n\t\t\t\tassigned[key] = true\n\t\t\t\tmarkChangedES5(state)\n\t\t\t} else if (!assigned[key]) {\n\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\tmarkChangesRecursively(draft[key])\n\t\t\t}\n\t\t})\n\t\t// Look for removed keys.\n\t\teach(base, key => {\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (draft[key] === undefined && !has(draft, key)) {\n\t\t\t\tassigned[key] = false\n\t\t\t\tmarkChangedES5(state)\n\t\t\t}\n\t\t})\n\t} else if (type === ProxyType.ES5Array && hasArrayChanges(state)) {\n\t\tmarkChangedES5(state)\n\t\tassigned.length = true\n\t\tif (draft.length < base.length) {\n\t\t\tfor (let i = draft.length; i < base.length; i++) assigned[i] = false\n\t\t} else {\n\t\t\tfor (let i = base.length; i < draft.length; i++) assigned[i] = true\n\t\t}\n\t\tfor (let i = 0; i < draft.length; i++) {\n\t\t\t// Only untouched indices trigger recursion.\n\t\t\tif (assigned[i] === undefined) markChangesRecursively(draft[i])\n\t\t}\n\t}\n}\n\nfunction hasObjectChanges(state: ES5ObjectState) {\n\tconst {base, draft} = state\n\n\t// Search for added keys and changed keys. Start at the back, because\n\t// non-numeric keys are ordered by time of definition on the object.\n\tconst keys = Object.keys(draft)\n\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\tconst key = keys[i]\n\t\tconst baseValue = base[key]\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (baseValue === undefined && !has(base, key)) {\n\t\t\treturn true\n\t\t}\n\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t// descriptor is erased. This branch detects any missed changes.\n\t\telse {\n\t\t\tconst value = draft[key]\n\t\t\tconst state = value && value[DRAFT_STATE]\n\t\t\tif (state ? state.base !== baseValue : !is(value, baseValue)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\t// At this point, no keys were added or changed.\n\t// Compare key count to determine if keys were deleted.\n\treturn keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state: ES5ArrayState) {\n\tconst {draft} = state\n\tif (draft.length !== state.base.length) return true\n\t// See #116\n\t// If we first shorten the length, our array interceptors will be removed.\n\t// If after that new items are added, result in the same original length,\n\t// those last items will have no intercepting property.\n\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t// the last one\n\tconst descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\tif (descriptor && !descriptor.get) return true\n\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\treturn false\n}\n","\"use strict\"\nimport {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tDRAFT_STATE,\n\tlatest\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\nimport {\n\tAnyObject,\n\tDrafted,\n\tImmerState,\n\tAnyArray,\n\tObjectish,\n\tImmerBaseState,\n\tProxyType\n} from \"./types\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned: {\n\t\t[property: string]: boolean\n\t}\n\tparent?: ImmerState\n\tdrafts?: {\n\t\t[property: string]: Drafted<any, any>\n\t}\n\trevoke(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype: ProxyType.ProxyObject\n\tbase: AnyObject\n\tcopy: AnyObject | null\n\tdraft: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype: ProxyType.ProxyArray\n\tbase: AnyArray\n\tcopy: AnyArray | null\n\tdraft: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified: false,\n\t\t// Used during finalization.\n\t\tfinalized: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned: {},\n\t\t// The parent draft state.\n\t\tparent,\n\t\t// The base state.\n\t\tbase,\n\t\t// The base proxy.\n\t\tdraft: null as any, // set below\n\t\t// Any property proxies.\n\t\tdrafts: {},\n\t\t// The base copy with any updated values.\n\t\tcopy: null,\n\t\t// Called by the `produce` function.\n\t\trevoke: null as any,\n\t\tisManual: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\t// TODO: optimization: might be faster, cheaper if we created a non-revocable proxy\n\t// and administrate revoking ourselves\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft = proxy as any\n\tstate.revoke = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nconst objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\t\tlet {drafts} = state\n\n\t\t// Check for existing draft in unmodified state.\n\t\tif (!state.modified && has(drafts, prop)) {\n\t\t\treturn drafts![prop as any]\n\t\t}\n\n\t\tconst value = latest(state)[prop]\n\t\tif (state.finalized || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\n\t\t// Check for existing draft in modified state.\n\t\tif (state.modified) {\n\t\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\t\tif (value !== peek(state.base, prop)) return value\n\t\t\t// Store drafts on the copy (when one exists).\n\t\t\t// @ts-ignore\n\t\t\tdrafts = state.copy\n\t\t}\n\n\t\treturn (drafts![prop as any] = state.scope.immer.createProxy(value, state))\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(state, prop: string /* strictly not, but helps TS */, value) {\n\t\tif (!state.modified) {\n\t\t\tconst baseValue = peek(state.base, prop)\n\t\t\t// Optimize based on value's truthiness. Truthy values are guaranteed to\n\t\t\t// never be undefined, so we can avoid the `in` operator. Lastly, truthy\n\t\t\t// values may be drafts, but falsy values are never drafts.\n\t\t\tconst isUnchanged = value\n\t\t\t\t? is(baseValue, value) || value === state.drafts![prop]\n\t\t\t\t: is(baseValue, value) && prop in state.base\n\t\t\tif (isUnchanged) return true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\t\tstate.assigned[prop] = true\n\t\t// @ts-ignore\n\t\tstate.copy![prop] = value\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base, prop) !== undefined || prop in state.base) {\n\t\t\tstate.assigned[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else if (state.assigned[prop]) {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy) delete state.copy[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (desc) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable =\n\t\t\t\tstate.type !== ProxyType.ProxyArray || prop !== \"length\"\n\t\t}\n\t\treturn desc\n\t},\n\tdefineProperty() {\n\t\tthrow new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base)\n\t},\n\tsetPrototypeOf() {\n\t\tthrow new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (isNaN(parseInt(prop as any))) {\n\t\tthrow new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n\t}\n\treturn objectTraps.deleteProperty!.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (prop !== \"length\" && isNaN(parseInt(prop as any))) {\n\t\tthrow new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n\t}\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n/**\n * Map drafts\n */\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey): any {\n\tconst state = draft[DRAFT_STATE]\n\tconst desc = Reflect.getOwnPropertyDescriptor(\n\t\tstate ? latest(state) : draft,\n\t\tprop\n\t)\n\treturn desc && desc.value\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tif (\n\t\t\tstate.type === ProxyType.ProxyObject ||\n\t\t\tstate.type === ProxyType.ProxyArray\n\t\t) {\n\t\t\tconst copy = (state.copy = shallowCopy(state.base))\n\t\t\teach(state.drafts!, (key, value) => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tcopy[key] = value\n\t\t\t})\n\t\t\tstate.drafts = undefined\n\t\t}\n\n\t\tif (state.parent) {\n\t\t\tmarkChanged(state.parent)\n\t\t}\n\t}\n}\n\nfunction prepareCopy(state: ProxyState) {\n\tif (!state.copy) {\n\t\tstate.copy = shallowCopy(state.base)\n\t}\n}\n","import {get, each, isMap, has, die, getArchtype} from \"./common\"\nimport {Patch, ImmerState, ProxyType, Archtype} from \"./types\"\nimport {SetState} from \"./set\"\nimport {ES5ArrayState, ES5ObjectState} from \"./es5\"\nimport {ProxyArrayState, ProxyObjectState} from \"./proxy\"\nimport {MapState} from \"./map\"\n\nexport type PatchPath = (string | number)[]\n\nexport function generatePatches(\n\tstate: ImmerState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n): void {\n\tswitch (state.type) {\n\t\tcase ProxyType.ProxyObject:\n\t\tcase ProxyType.ES5Object:\n\t\tcase ProxyType.Map:\n\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\tstate,\n\t\t\t\tbasePath,\n\t\t\t\tpatches,\n\t\t\t\tinversePatches\n\t\t\t)\n\t\tcase ProxyType.ES5Array:\n\t\tcase ProxyType.ProxyArray:\n\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\tcase ProxyType.Set:\n\t\t\treturn generateSetPatches(\n\t\t\t\t(state as any) as SetState,\n\t\t\t\tbasePath,\n\t\t\t\tpatches,\n\t\t\t\tinversePatches\n\t\t\t)\n\t}\n}\n\nfunction generateArrayPatches(\n\tstate: ES5ArrayState | ProxyArrayState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n) {\n\tlet {base, assigned, copy} = state\n\t/* istanbul ignore next */\n\tif (!copy) die()\n\n\t// Reduce complexity by ensuring `base` is never longer.\n\tif (copy.length < base.length) {\n\t\t// @ts-ignore\n\t\t;[base, copy] = [copy, base]\n\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t}\n\n\tconst delta = copy.length - base.length\n\n\t// Find the first replaced index.\n\tlet start = 0\n\twhile (base[start] === copy[start] && start < base.length) {\n\t\t++start\n\t}\n\n\t// Find the last replaced index. Search from the end to optimize splice patches.\n\tlet end = base.length\n\twhile (end > start && base[end - 1] === copy[end + delta - 1]) {\n\t\t--end\n\t}\n\n\t// Process replaced indices.\n\tfor (let i = start; i < end; ++i) {\n\t\tif (assigned[i] && copy[i] !== base[i]) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: copy[i]\n\t\t\t})\n\t\t\tinversePatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: base[i]\n\t\t\t})\n\t\t}\n\t}\n\n\tconst replaceCount = patches.length\n\n\t// Process added indices.\n\tfor (let i = end + delta - 1; i >= end; --i) {\n\t\tconst path = basePath.concat([i])\n\t\tpatches[replaceCount + i - end] = {\n\t\t\top: \"add\",\n\t\t\tpath,\n\t\t\tvalue: copy[i]\n\t\t}\n\t\tinversePatches.push({\n\t\t\top: \"remove\",\n\t\t\tpath\n\t\t})\n\t}\n}\n\n// This is used for both Map objects and normal objects.\nfunction generatePatchesFromAssigned(\n\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n) {\n\tconst {base, copy} = state\n\teach(state.assigned!, (key, assignedValue) => {\n\t\tconst origValue = get(base, key)\n\t\tconst value = get(copy!, key)\n\t\tconst op = !assignedValue ? \"remove\" : has(base, key) ? \"replace\" : \"add\"\n\t\tif (origValue === value && op === \"replace\") return\n\t\tconst path = basePath.concat(key as any)\n\t\tpatches.push(op === \"remove\" ? {op, path} : {op, path, value})\n\t\tinversePatches.push(\n\t\t\top === \"add\"\n\t\t\t\t? {op: \"remove\", path}\n\t\t\t\t: op === \"remove\"\n\t\t\t\t? {op: \"add\", path, value: origValue}\n\t\t\t\t: {op: \"replace\", path, value: origValue}\n\t\t)\n\t})\n}\n\nfunction generateSetPatches(\n\tstate: SetState,\n\tbasePath: PatchPath,\n\tpatches: Patch[],\n\tinversePatches: Patch[]\n) {\n\tlet {base, copy} = state\n\n\tlet i = 0\n\tbase.forEach(value => {\n\t\tif (!copy!.has(value)) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"remove\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t\tinversePatches.unshift({\n\t\t\t\top: \"add\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t}\n\t\ti++\n\t})\n\ti = 0\n\tcopy!.forEach(value => {\n\t\tif (!base.has(value)) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"add\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t\tinversePatches.unshift({\n\t\t\t\top: \"remove\",\n\t\t\t\tpath,\n\t\t\t\tvalue\n\t\t\t})\n\t\t}\n\t\ti++\n\t})\n}\n\nexport function applyPatches<T>(draft: T, patches: Patch[]): T {\n\tpatches.forEach(patch => {\n\t\tconst {path, op} = patch\n\n\t\t/* istanbul ignore next */\n\t\tif (!path.length) die()\n\n\t\tlet base: any = draft\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tbase = get(base, path[i])\n\t\t\tif (!base || typeof base !== \"object\")\n\t\t\t\tthrow new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n\t\t}\n\n\t\tconst type = getArchtype(base)\n\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\tconst key = path[path.length - 1]\n\t\tswitch (op) {\n\t\t\tcase \"replace\":\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\tthrow new Error('Sets cannot have \"replace\" patches.')\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t}\n\t\t\tcase \"add\":\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\treturn base.splice(key as any, 0, value)\n\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t}\n\t\t\tcase \"remove\":\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unsupported patch operation: \" + op)\n\t\t}\n\t})\n\n\treturn draft\n}\n\n// TODO: optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n// E.g. auto-draft when new objects from outside are assigned and modified?\n// (See failing test when deepClone just returns obj)\nfunction deepClonePatchValue<T>(obj: T): T\nfunction deepClonePatchValue(obj: any) {\n\tif (!obj || typeof obj !== \"object\") return obj\n\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\tif (isMap(obj))\n\t\treturn new Map(\n\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t)\n\t// Not needed: if (isSet(obj)) return new Set(Array.from(obj.values()).map(deepClone))\n\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\treturn cloned\n}\n","import {isDraftable, DRAFT_STATE, latest, iteratorSymbol} from \"./common\"\n\nimport {ImmerScope} from \"./scope\"\nimport {AnyMap, Drafted, ImmerState, ImmerBaseState, ProxyType} from \"./types\"\nimport {assertUnrevoked} from \"./es5\"\n\nexport interface MapState extends ImmerBaseState {\n\ttype: ProxyType.Map\n\tcopy: AnyMap | undefined\n\tassigned: Map<any, boolean> | undefined\n\tbase: AnyMap\n\trevoked: boolean\n\tdraft: Drafted<AnyMap, MapState>\n}\n\n// Make sure DraftMap declarion doesn't die if Map is not avialable...\n/* istanbul ignore next */\nconst MapBase: MapConstructor =\n\ttypeof Map !== \"undefined\" ? Map : (function FakeMap() {} as any)\n\nexport class DraftMap<K, V> extends MapBase implements Map<K, V> {\n\t[DRAFT_STATE]: MapState\n\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\tsuper()\n\t\tthis[DRAFT_STATE] = {\n\t\t\ttype: ProxyType.Map,\n\t\t\tparent,\n\t\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\t\tmodified: false,\n\t\t\tfinalized: false,\n\t\t\tcopy: undefined,\n\t\t\tassigned: undefined,\n\t\t\tbase: target,\n\t\t\tdraft: this,\n\t\t\tisManual: false,\n\t\t\trevoked: false\n\t\t}\n\t}\n\n\tget size(): number {\n\t\treturn latest(this[DRAFT_STATE]).size\n\t}\n\n\thas(key: K): boolean {\n\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t}\n\n\tset(key: K, value: V): this {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tif (latest(state).get(key) !== value) {\n\t\t\tprepareCopy(state)\n\t\t\tstate.scope.immer.markChanged(state)\n\t\t\tstate.assigned!.set(key, true)\n\t\t\tstate.copy!.set(key, value)\n\t\t\tstate.assigned!.set(key, true)\n\t\t}\n\t\treturn this\n\t}\n\n\tdelete(key: K): boolean {\n\t\tif (!this.has(key)) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\tstate.assigned!.set(key, false)\n\t\tstate.copy!.delete(key)\n\t\treturn true\n\t}\n\n\tclear() {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\tstate.assigned = new Map()\n\t\tfor (const key of latest(state).keys()) {\n\t\t\tstate.assigned.set(key, false)\n\t\t}\n\t\treturn state.copy!.clear()\n\t}\n\n\tforEach(cb: (value: V, key: K, self: this) => void, thisArg?: any) {\n\t\tconst state = this[DRAFT_STATE]\n\t\tlatest(state).forEach((_value: V, key: K, _map: this) => {\n\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t})\n\t}\n\n\tget(key: K): V {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tconst value = latest(state).get(key)\n\t\tif (state.finalized || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\tif (value !== state.base.get(key)) {\n\t\t\treturn value // either already drafted or reassigned\n\t\t}\n\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\tconst draft = state.scope.immer.createProxy(value, state)\n\t\tprepareCopy(state)\n\t\tstate.copy!.set(key, draft)\n\t\treturn draft\n\t}\n\n\tkeys(): IterableIterator<K> {\n\t\treturn latest(this[DRAFT_STATE]).keys()\n\t}\n\n\tvalues(): IterableIterator<V> {\n\t\tconst iterator = this.keys()\n\t\treturn {\n\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\tnext: () => {\n\t\t\t\tconst r = iterator.next()\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (r.done) return r\n\t\t\t\tconst value = this.get(r.value)\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t} as any\n\t}\n\n\tentries(): IterableIterator<[K, V]> {\n\t\tconst iterator = this.keys()\n\t\treturn {\n\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\tnext: () => {\n\t\t\t\tconst r = iterator.next()\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (r.done) return r\n\t\t\t\tconst value = this.get(r.value)\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t}\n\t\t\t}\n\t\t} as any\n\t}\n\n\t[iteratorSymbol]() {\n\t\treturn this.entries()\n\t}\n}\n\nexport function proxyMap(target: AnyMap, parent?: ImmerState) {\n\treturn new DraftMap(target, parent)\n}\n\nfunction prepareCopy(state: MapState) {\n\tif (!state.copy) {\n\t\tstate.assigned = new Map()\n\t\tstate.copy = new Map(state.base)\n\t}\n}\n","import {DRAFT_STATE, latest, isDraftable, iteratorSymbol} from \"./common\"\n\nimport {ImmerScope} from \"./scope\"\nimport {AnySet, Drafted, ImmerState, ImmerBaseState, ProxyType} from \"./types\"\nimport {assertUnrevoked} from \"./es5\"\n\nexport interface SetState extends ImmerBaseState {\n\ttype: ProxyType.Set\n\tcopy: AnySet | undefined\n\tbase: AnySet\n\tdrafts: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked: boolean\n\tdraft: Drafted<AnySet, SetState>\n}\n\n// Make sure DraftSet declarion doesn't die if Map is not avialable...\n/* istanbul ignore next */\nconst SetBase: SetConstructor =\n\ttypeof Set !== \"undefined\" ? Set : (function FakeSet() {} as any)\n\nexport class DraftSet<K, V> extends SetBase implements Set<V> {\n\t[DRAFT_STATE]: SetState\n\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\tsuper()\n\t\tthis[DRAFT_STATE] = {\n\t\t\ttype: ProxyType.Set,\n\t\t\tparent,\n\t\t\tscope: parent ? parent.scope : ImmerScope.current!,\n\t\t\tmodified: false,\n\t\t\tfinalized: false,\n\t\t\tcopy: undefined,\n\t\t\tbase: target,\n\t\t\tdraft: this,\n\t\t\tdrafts: new Map(),\n\t\t\trevoked: false,\n\t\t\tisManual: false\n\t\t}\n\t}\n\n\tget size(): number {\n\t\treturn latest(this[DRAFT_STATE]).size\n\t}\n\n\thas(value: V): boolean {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\tif (!state.copy) {\n\t\t\treturn state.base.has(value)\n\t\t}\n\t\tif (state.copy.has(value)) return true\n\t\tif (state.drafts.has(value) && state.copy.has(state.drafts.get(value)))\n\t\t\treturn true\n\t\treturn false\n\t}\n\n\tadd(value: V): this {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tif (state.copy) {\n\t\t\tstate.copy.add(value)\n\t\t} else if (!state.base.has(value)) {\n\t\t\tprepareCopy(state)\n\t\t\tstate.scope.immer.markChanged(state)\n\t\t\tstate.copy!.add(value)\n\t\t}\n\t\treturn this\n\t}\n\n\tdelete(value: V): boolean {\n\t\tif (!this.has(value)) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\treturn (\n\t\t\tstate.copy!.delete(value) ||\n\t\t\t(state.drafts.has(value)\n\t\t\t\t? state.copy!.delete(state.drafts.get(value))\n\t\t\t\t: /* istanbul ignore next */ false)\n\t\t)\n\t}\n\n\tclear() {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\tstate.scope.immer.markChanged(state)\n\t\treturn state.copy!.clear()\n\t}\n\n\tvalues(): IterableIterator<V> {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\treturn state.copy!.values()\n\t}\n\n\tentries(): IterableIterator<[V, V]> {\n\t\tconst state = this[DRAFT_STATE]\n\t\tassertUnrevoked(state)\n\t\tprepareCopy(state)\n\t\treturn state.copy!.entries()\n\t}\n\n\tkeys(): IterableIterator<V> {\n\t\treturn this.values()\n\t}\n\n\t[iteratorSymbol]() {\n\t\treturn this.values()\n\t}\n\n\tforEach(cb: (value: V, key: V, self: this) => void, thisArg?: any) {\n\t\tconst iterator = this.values()\n\t\tlet result = iterator.next()\n\t\twhile (!result.done) {\n\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\tresult = iterator.next()\n\t\t}\n\t}\n}\n\nexport function proxySet(target: AnySet, parent?: ImmerState) {\n\treturn new DraftSet(target, parent)\n}\n\nfunction prepareCopy(state: SetState) {\n\tif (!state.copy) {\n\t\t// create drafts for all entries to preserve insertion order\n\t\tstate.copy = new Set()\n\t\tstate.base.forEach(value => {\n\t\t\tif (isDraftable(value)) {\n\t\t\t\tconst draft = state.scope.immer.createProxy(value, state)\n\t\t\t\tstate.drafts.set(value, draft)\n\t\t\t\tstate.copy!.add(draft)\n\t\t\t} else {\n\t\t\t\tstate.copy!.add(value)\n\t\t\t}\n\t\t})\n\t}\n}\n","import {Immer} from \"./immer\"\nimport {ImmerState, Drafted, ProxyType} from \"./types\"\nimport {ImmerScope} from \"./scope\"\nimport {\n\tisSet,\n\thas,\n\tis,\n\tget,\n\teach,\n\tDRAFT_STATE,\n\tNOTHING,\n\tfreeze,\n\tshallowCopy,\n\tset\n} from \"./common\"\nimport {isDraft, isDraftable} from \"./index\"\nimport {SetState} from \"./set\"\nimport {generatePatches, PatchPath} from \"./patches\"\n\nexport function processResult(immer: Immer, result: any, scope: ImmerScope) {\n\tconst baseDraft = scope.drafts![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\timmer.willFinalize(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified) {\n\t\t\tscope.revoke()\n\t\t\tthrow new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(immer, result, scope)\n\t\t\tmaybeFreeze(immer, result)\n\t\t}\n\t\tif (scope.patches) {\n\t\t\tscope.patches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath: [],\n\t\t\t\tvalue: result\n\t\t\t})\n\t\t\tscope.inversePatches!.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath: [],\n\t\t\t\tvalue: baseDraft[DRAFT_STATE].base\n\t\t\t})\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(immer, baseDraft, scope, [])\n\t}\n\tscope.revoke()\n\tif (scope.patches) {\n\t\tscope.patchListener!(scope.patches, scope.inversePatches!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(\n\timmer: Immer,\n\tdraft: Drafted,\n\tscope: ImmerScope,\n\tpath?: PatchPath\n) {\n\tconst state = draft[DRAFT_STATE]\n\tif (!state) {\n\t\tif (Object.isFrozen(draft)) return draft\n\t\treturn finalizeTree(immer, draft, scope)\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope !== scope) {\n\t\treturn draft\n\t}\n\tif (!state.modified) {\n\t\tmaybeFreeze(immer, state.base, true)\n\t\treturn state.base\n\t}\n\tif (!state.finalized) {\n\t\tstate.finalized = true\n\t\tfinalizeTree(immer, state.draft, scope, path)\n\n\t\t// We cannot really delete anything inside of a Set. We can only replace the whole Set.\n\t\tif (immer.onDelete && state.type !== ProxyType.Set) {\n\t\t\t// The `assigned` object is unreliable with ES5 drafts.\n\t\t\tif (immer.useProxies) {\n\t\t\t\tconst {assigned} = state\n\t\t\t\teach(assigned, (prop, exists) => {\n\t\t\t\t\tif (!exists) immer.onDelete!(state, prop as any)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tconst {base, copy} = state\n\t\t\t\teach(base, prop => {\n\t\t\t\t\tif (!has(copy, prop)) immer.onDelete!(state, prop as any)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (immer.onCopy) {\n\t\t\timmer.onCopy(state)\n\t\t}\n\n\t\t// At this point, all descendants of `state.copy` have been finalized,\n\t\t// so we can be sure that `scope.canAutoFreeze` is accurate.\n\t\tif (immer.autoFreeze && scope.canAutoFreeze) {\n\t\t\tfreeze(state.copy, false)\n\t\t}\n\n\t\tif (path && scope.patches) {\n\t\t\tgeneratePatches(state, path, scope.patches, scope.inversePatches!)\n\t\t}\n\t}\n\treturn state.copy\n}\n\nfunction finalizeTree(\n\timmer: Immer,\n\troot: Drafted,\n\tscope: ImmerScope,\n\trootPath?: PatchPath\n) {\n\tconst state = root[DRAFT_STATE]\n\tif (state) {\n\t\tif (\n\t\t\tstate.type === ProxyType.ES5Object ||\n\t\t\tstate.type === ProxyType.ES5Array\n\t\t) {\n\t\t\t// Create the final copy, with added keys and without deleted keys.\n\t\t\tstate.copy = shallowCopy(state.draft, true)\n\t\t}\n\t\troot = state.copy\n\t}\n\teach(root, (key, value) =>\n\t\tfinalizeProperty(immer, scope, root, state, root, key, value, rootPath)\n\t)\n\treturn root\n}\n\nfunction finalizeProperty(\n\timmer: Immer,\n\tscope: ImmerScope,\n\troot: Drafted,\n\trootState: ImmerState,\n\tparentValue: Drafted,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (childValue === parentValue) {\n\t\tthrow Error(\"Immer forbids circular references\")\n\t}\n\n\t// In the `finalizeTree` method, only the `root` object may be a draft.\n\tconst isDraftProp = !!rootState && parentValue === root\n\tconst isSetMember = isSet(parentValue)\n\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tisDraftProp &&\n\t\t\t!isSetMember && // Set objects are atomic since they have no keys.\n\t\t\t!has((rootState as Exclude<ImmerState, SetState>).assigned!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tchildValue = finalize(immer, childValue, scope, path)\n\t\tset(parentValue, prop, childValue)\n\n\t\t// Drafts from another scope must prevent auto-freezing.\n\t\tif (isDraft(childValue)) {\n\t\t\tscope.canAutoFreeze = false\n\t\t}\n\t}\n\t// Unchanged draft properties are ignored.\n\telse if (isDraftProp && is(childValue, get(rootState.base, prop))) {\n\t\treturn\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\t// TODO: the recursion over here looks weird, shouldn't non-draft stuff have it's own recursion?\n\t// especially the passing on of root and rootState doesn't make sense...\n\telse if (isDraftable(childValue) && !Object.isFrozen(childValue)) {\n\t\teach(childValue, (key, grandChild) =>\n\t\t\tfinalizeProperty(\n\t\t\t\timmer,\n\t\t\t\tscope,\n\t\t\t\troot,\n\t\t\t\trootState,\n\t\t\t\tchildValue,\n\t\t\t\tkey,\n\t\t\t\tgrandChild,\n\t\t\t\trootPath\n\t\t\t)\n\t\t)\n\t\tmaybeFreeze(immer, childValue)\n\t}\n\n\tif (isDraftProp && immer.onAssign && !isSetMember) {\n\t\timmer.onAssign(rootState, prop, childValue)\n\t}\n}\n\nexport function maybeFreeze(immer: Immer, value: any, deep = false) {\n\tif (immer.autoFreeze && !isDraft(value)) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {createES5Proxy, willFinalizeES5, markChangedES5} from \"./es5\"\nimport {createProxy, markChanged} from \"./proxy\"\n\nimport {applyPatches} from \"./patches\"\nimport {\n\teach,\n\tisDraft,\n\tisSet,\n\tisMap,\n\tisDraftable,\n\tDRAFT_STATE,\n\tNOTHING,\n\tdie\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\nimport {\n\tImmerState,\n\tIProduce,\n\tIProduceWithPatches,\n\tObjectish,\n\tPatchListener,\n\tDraft,\n\tPatch,\n\tDrafted\n} from \"./types\"\nimport {proxyMap} from \"./map\"\nimport {proxySet} from \"./set\"\nimport {processResult, maybeFreeze} from \"./finalize\"\n\n/* istanbul ignore next */\nfunction verifyMinified() {}\n\nconst configDefaults = {\n\tuseProxies:\n\t\ttypeof Proxy !== \"undefined\" &&\n\t\ttypeof Proxy.revocable !== \"undefined\" &&\n\t\ttypeof Reflect !== \"undefined\",\n\tautoFreeze:\n\t\ttypeof process !== \"undefined\"\n\t\t\t? process.env.NODE_ENV !== \"production\"\n\t\t\t: /* istanbul ignore next */\n\t\t\t  verifyMinified.name === \"verifyMinified\",\n\tonAssign: null,\n\tonDelete: null,\n\tonCopy: null\n} as const\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies: boolean = false\n\tautoFreeze: boolean = false\n\tonAssign?: (state: ImmerState, prop: string | number, value: unknown) => void\n\tonDelete?: (state: ImmerState, prop: string | number) => void\n\tonCopy?: (state: ImmerState) => void\n\n\tconstructor(config?: {\n\t\tuseProxies?: boolean\n\t\tautoFreeze?: boolean\n\t\tonAssign?: (\n\t\t\tstate: ImmerState,\n\t\t\tprop: string | number,\n\t\t\tvalue: unknown\n\t\t) => void\n\t\tonDelete?: (state: ImmerState, prop: string | number) => void\n\t\tonCopy?: (state: ImmerState) => void\n\t}) {\n\t\teach(configDefaults, (key, value) => {\n\t\t\t// @ts-ignore\n\t\t\tthis[key] = config?.[key] ?? value\n\t\t})\n\t\tthis.setUseProxies(this.useProxies)\n\t\tthis.produce = this.produce.bind(this)\n\t\tthis.produceWithPatches = this.produceWithPatches.bind(this)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce(base: any, recipe?: any, patchListener?: any) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\t// prettier-ignore\n\t\t{\n\t\t\tif (typeof recipe !== \"function\") {\n\t\t\t\tthrow new Error(\"The first or second argument to `produce` must be a function\")\n\t\t\t}\n\t\t\tif (patchListener !== undefined && typeof patchListener !== \"function\") {\n\t\t\t\tthrow new Error(\"The third argument to `produce` must be a function or undefined\")\n\t\t\t}\n\t\t}\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = ImmerScope.enter(this)\n\t\t\tconst proxy = this.createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) scope.revoke()\n\t\t\t\telse scope.leave()\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tscope.usePatches(patchListener)\n\t\t\t\t\t\treturn processResult(this, result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tscope.revoke()\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tscope.usePatches(patchListener)\n\t\t\treturn processResult(this, result, scope)\n\t\t} else {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tmaybeFreeze(this, result, true)\n\t\t\treturn result\n\t\t}\n\t}\n\n\tproduceWithPatches(arg1: any, arg2?: any, arg3?: any): any {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\t\t// non-curried form\n\t\t/* istanbul ignore next */\n\t\tif (arg3) die()\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst nextState = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Drafted<T> {\n\t\tif (!isDraftable(base)) {\n\t\t\tthrow new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\") // prettier-ignore\n\t\t}\n\t\tconst scope = ImmerScope.enter(this)\n\t\tconst proxy = this.createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual = true\n\t\tscope.leave()\n\t\treturn proxy\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && draft[DRAFT_STATE]\n\t\tif (!state || !state.isManual) {\n\t\t\tthrow new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\") // prettier-ignore\n\t\t}\n\t\tif (state.finalized) {\n\t\t\tthrow new Error(\"The given draft is already finalized\") // prettier-ignore\n\t\t}\n\t\tconst {scope} = state\n\t\tscope.usePatches(patchListener)\n\t\treturn processResult(this, undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is disabled in production.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tthis.useProxies = value\n\t}\n\n\tapplyPatches(base: Objectish, patches: Patch[]) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatches(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatches(draft, patches.slice(i + 1))\n\t\t)\n\t}\n\n\tcreateProxy<T extends Objectish>(\n\t\tvalue: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ImmerState> {\n\t\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\t\tconst draft: Drafted = isMap(value)\n\t\t\t? proxyMap(value, parent)\n\t\t\t: isSet(value)\n\t\t\t? proxySet(value, parent)\n\t\t\t: this.useProxies\n\t\t\t? createProxy(value, parent)\n\t\t\t: createES5Proxy(value, parent)\n\n\t\tconst scope = parent ? parent.scope : ImmerScope.current!\n\t\tscope.drafts.push(draft)\n\t\treturn draft\n\t}\n\n\twillFinalize(scope: ImmerScope, thing: any, isReplaced: boolean) {\n\t\tif (!this.useProxies) willFinalizeES5(scope, thing, isReplaced)\n\t}\n\n\tmarkChanged(state: ImmerState) {\n\t\tif (this.useProxies) {\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\tmarkChangedES5(state)\n\t\t}\n\t}\n}\n","import {Immer} from \"./immer\"\nimport {IProduce, IProduceWithPatches} from \"./types\"\n\nexport {Draft, Immutable, Patch, PatchListener} from \"./types\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\nexport {\n\toriginal,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable\n} from \"./common\"\n\nexport {Immer}\n"]},"metadata":{},"sourceType":"module"}