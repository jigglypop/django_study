{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YDH\\\\Desktop\\\\drop\\\\Vote\\\\blog-frontend\\\\src\\\\containers\\\\write\\\\WriteActionButtonsContainer.js\";\nimport React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({\n  history\n}) => {\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    write\n  }) => ({\n    title: write.title,\n    body: write.body,\n    tags: write.tags,\n    post: write.post,\n    postError: write.postError,\n    originalPostId: write.originalPostId\n  })),\n        title = _useSelector.title,\n        body = _useSelector.body,\n        url = _useSelector.url,\n        tags = _useSelector.tags,\n        post = _useSelector.post,\n        postError = _useSelector.postError,\n        originalPostId = _useSelector.originalPostId;\n\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({\n        title,\n        body,\n        tags,\n        id: originalPostId\n      }));\n      return;\n    }\n\n    dispatch(writePost({\n      title,\n      body,\n      tags\n    }));\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  useEffect(() => {\n    if (post) {\n      const _id = post._id,\n            user = post.user;\n      history.push(`/@${user.username}/${_id}`);\n    }\n\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return React.createElement(WriteActionButtons, {\n    onPublish: onPublish,\n    onCancel: onCancel,\n    isEdit: !!originalPostId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(WriteActionButtonsContainer);","map":{"version":3,"sources":["C:/Users/YDH/Desktop/drop/Vote/blog-frontend/src/containers/write/WriteActionButtonsContainer.js"],"names":["React","useEffect","WriteActionButtons","useSelector","useDispatch","withRouter","writePost","updatePost","WriteActionButtonsContainer","history","dispatch","write","title","body","tags","post","postError","originalPostId","url","onPublish","id","onCancel","goBack","_id","user","push","username","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,kBAAP,MAA+B,2CAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,qBAAtC;;AAEA,MAAMC,2BAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACnD,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AADmD,uBAU/CD,WAAW,CAAC,CAAC;AAAEQ,IAAAA;AAAF,GAAD,MAAgB;AAC9BC,IAAAA,KAAK,EAAED,KAAK,CAACC,KADiB;AAE9BC,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAFkB;AAG9BC,IAAAA,IAAI,EAAEH,KAAK,CAACG,IAHkB;AAI9BC,IAAAA,IAAI,EAAEJ,KAAK,CAACI,IAJkB;AAK9BC,IAAAA,SAAS,EAAEL,KAAK,CAACK,SALa;AAM9BC,IAAAA,cAAc,EAAEN,KAAK,CAACM;AANQ,GAAhB,CAAD,CAVoC;AAAA,QAGjDL,KAHiD,gBAGjDA,KAHiD;AAAA,QAIjDC,IAJiD,gBAIjDA,IAJiD;AAAA,QAKjDK,GALiD,gBAKjDA,GALiD;AAAA,QAMjDJ,IANiD,gBAMjDA,IANiD;AAAA,QAOjDC,IAPiD,gBAOjDA,IAPiD;AAAA,QAQjDC,SARiD,gBAQjDA,SARiD;AAAA,QASjDC,cATiD,gBASjDA,cATiD;;AAmBnD,QAAME,SAAS,GAAG,MAAM;AACtB,QAAIF,cAAJ,EAAoB;AAClBP,MAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEK,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeC,QAAAA,IAAf;AAAqBM,QAAAA,EAAE,EAAEH;AAAzB,OAAD,CAAX,CAAR;AACA;AACD;;AACDP,IAAAA,QAAQ,CACNJ,SAAS,CAAC;AACRM,MAAAA,KADQ;AAERC,MAAAA,IAFQ;AAGRC,MAAAA;AAHQ,KAAD,CADH,CAAR;AAOD,GAZD;;AAcA,QAAMO,QAAQ,GAAG,MAAM;AACrBZ,IAAAA,OAAO,CAACa,MAAR;AACD,GAFD;;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAJ,EAAU;AAAA,YACAQ,GADA,GACcR,IADd,CACAQ,GADA;AAAA,YACKC,IADL,GACcT,IADd,CACKS,IADL;AAERf,MAAAA,OAAO,CAACgB,IAAR,CAAc,KAAID,IAAI,CAACE,QAAS,IAAGH,GAAI,EAAvC;AACD;;AACD,QAAIP,SAAJ,EAAe;AACbW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACD;AACF,GARQ,EAQN,CAACP,OAAD,EAAUM,IAAV,EAAgBC,SAAhB,CARM,CAAT;AASA,SACE,oBAAC,kBAAD;AACE,IAAA,SAAS,EAAEG,SADb;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,MAAM,EAAE,CAAC,CAACJ,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CArDD;;AAuDA,eAAeZ,UAAU,CAACG,2BAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    title,\r\n    body,\r\n    url,\r\n    tags,\r\n    post,\r\n    postError,\r\n    originalPostId,\r\n  } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    body: write.body,\r\n    tags: write.tags,\r\n    post: write.post,\r\n    postError: write.postError,\r\n    originalPostId: write.originalPostId,\r\n  }));\r\n\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n"]},"metadata":{},"sourceType":"module"}