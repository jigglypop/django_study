{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\react2\\\\27_UD\\\\blog\\\\blog-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\react2\\\\27_UD\\\\blog\\\\blog-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE';\nconst CHANGE_FIELD = 'write/CHANGE_FIELD';\n\nconst _createRequestActionT = createRequestActionTypes('write/WRITE_POST'),\n      _createRequestActionT2 = _slicedToArray(_createRequestActionT, 3),\n      WRITE_POST = _createRequestActionT2[0],\n      WRITE_POST_SUCCESS = _createRequestActionT2[1],\n      WRITE_POST_FAILURE = _createRequestActionT2[2];\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\n\nconst _createRequestActionT3 = createRequestActionTypes('write/UPDATE_POST'),\n      _createRequestActionT4 = _slicedToArray(_createRequestActionT3, 3),\n      UPDATE_POST = _createRequestActionT4[0],\n      UPDATE_POST_SUCCESS = _createRequestActionT4[1],\n      UPDATE_POST_FAILURE = _createRequestActionT4[2];\n\nexport const upatePost = createAction(UPDATE_POST, ({\n  id,\n  title,\n  body,\n  tags\n}) => ({\n  id,\n  title,\n  body,\n  tags\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  body,\n  tags\n}) => ({\n  title,\n  body,\n  tags\n})); // Saga\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => _objectSpread({}, state, {\n    [key]: value\n  }),\n  [WRITE_POST]: state => _objectSpread({}, state, {\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    post\n  }),\n  [WRITE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => _objectSpread({}, state, {\n    postError\n  }),\n  [SET_ORIGINAL_POST]: (state, {\n    payload: post\n  }) => _objectSpread({}, state, {\n    title: post.title,\n    body: post.body,\n    tags: post.tags,\n    originalPostId: post._id\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:/Users/multicampus/Desktop/react2/27_UD/blog/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","upatePost","id","title","body","tags","setOriginalPost","post","initialize","changeField","key","value","writePost","writePostSaga","updatePostSaga","updatePost","writeSaga","initialState","postError","write","state","payload","originalPostId","_id"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,UAAU,GAAG,kBAAnB;AACA,MAAMC,YAAY,GAAG,oBAArB;;8BAKIJ,wBAAwB,CAAC,kBAAD,C;;MAH1BK,U;MACAC,kB;MACAC,kB;;AAEF,MAAMC,iBAAiB,GAAG,yBAA1B;;+BAKIR,wBAAwB,CAAC,mBAAD,C;;MAH1BS,W;MACAC,mB;MACAC,mB;;AAGF,OAAO,MAAMC,SAAS,GAAGf,YAAY,CACnCY,WADmC,EAEnC,CAAC;AAAEI,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,IAAb;AAAmBC,EAAAA;AAAnB,CAAD,MAAgC;AAAEH,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,IAAb;AAAmBC,EAAAA;AAAnB,CAAhC,CAFmC,CAA9B;AAIP,OAAO,MAAMC,eAAe,GAAGpB,YAAY,CAACW,iBAAD,EAAoBU,IAAI,IAAIA,IAA5B,CAApC;AAEP,OAAO,MAAMC,UAAU,GAAGtB,YAAY,CAACM,UAAD,CAA/B;AACP,OAAO,MAAMiB,WAAW,GAAGvB,YAAY,CAACO,YAAD,EAAe,CAAC;AAAEiB,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,MAAqB;AACzED,EAAAA,GADyE;AAEzEC,EAAAA;AAFyE,CAArB,CAAf,CAAhC;AAIP,OAAO,MAAMC,SAAS,GAAG1B,YAAY,CAACQ,UAAD,EAAa,CAAC;AAAES,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,MAA4B;AAC5EF,EAAAA,KAD4E;AAE5EC,EAAAA,IAF4E;AAG5EC,EAAAA;AAH4E,CAA5B,CAAb,CAA9B,C,CAMP;;AACA,MAAMQ,aAAa,GAAGzB,iBAAiB,CAACM,UAAD,EAAaJ,QAAQ,CAACsB,SAAtB,CAAvC;AACA,MAAME,cAAc,GAAG1B,iBAAiB,CAACU,WAAD,EAAcR,QAAQ,CAACyB,UAAvB,CAAxC;AACA,OAAO,UAAUC,SAAV,GAAsB;AAC3B,QAAMzB,UAAU,CAACG,UAAD,EAAamB,aAAb,CAAhB;AACA,QAAMtB,UAAU,CAACO,WAAD,EAAcgB,cAAd,CAAhB;AACD;AAED,MAAMG,YAAY,GAAG;AACnBd,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBE,EAAAA,IAAI,EAAE,IAJa;AAKnBW,EAAAA,SAAS,EAAE;AALQ,CAArB;AAQA,MAAMC,KAAK,GAAGhC,aAAa,CACzB;AACE,GAACK,UAAD,GAAc4B,KAAK,IAAIH,YADzB;AAEE,GAACxB,YAAD,GAAgB,CAAC2B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAE;AAAEX,MAAAA,GAAF;AAAOC,MAAAA;AAAP;AAAX,GAAR,uBACXS,KADW;AAEd,KAACV,GAAD,GAAOC;AAFO,IAFlB;AAME,GAACjB,UAAD,GAAc0B,KAAK,sBACdA,KADc;AAEjBb,IAAAA,IAAI,EAAE,IAFW;AAGjBW,IAAAA,SAAS,EAAE;AAHM,IANrB;AAWE,GAACvB,kBAAD,GAAsB,CAACyB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEd;AAAX,GAAR,uBACjBa,KADiB;AAEpBb,IAAAA;AAFoB,IAXxB;AAeE,GAACX,kBAAD,GAAsB,CAACwB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,uBACjBE,KADiB;AAEpBF,IAAAA;AAFoB,IAfxB;AAmBE,GAACrB,iBAAD,GAAqB,CAACuB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEd;AAAX,GAAR,uBAChBa,KADgB;AAEnBjB,IAAAA,KAAK,EAAEI,IAAI,CAACJ,KAFO;AAGnBC,IAAAA,IAAI,EAAEG,IAAI,CAACH,IAHQ;AAInBC,IAAAA,IAAI,EAAEE,IAAI,CAACF,IAJQ;AAKnBiB,IAAAA,cAAc,EAAEf,IAAI,CAACgB;AALF;AAnBvB,CADyB,EA4BzBN,YA5ByB,CAA3B;AA+BA,eAAeE,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE';\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD';\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST');\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST');\r\n\r\nexport const upatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({ id, title, body, tags }),\r\n);\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\n\r\n// Saga\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState,\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value,\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n"]},"metadata":{},"sourceType":"module"}