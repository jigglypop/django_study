{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\multicampus\\\\Desktop\\\\react2\\\\27_UD\\\\blog\\\\blog-frontend\\\\src\\\\containers\\\\post\\\\PostViewerContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\n\nconst PostViewerContainer = ({\n  match,\n  history\n}) => {\n  const postId = match.params.postId;\n  const dispatch = useDispatch();\n\n  const _useSelector = useSelector(({\n    post,\n    loading\n  }) => ({\n    post: post.post,\n    error: post.error,\n    loading: loading['post/READ_POST'],\n    user: user.user\n  })),\n        post = _useSelector.post,\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        user = _useSelector.user;\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch.postId]);\n  return React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    actionButtons: React.createElement(PostActionButtons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n};\n\nexport default withRouter(PostViewerContainer);","map":{"version":3,"sources":["C:/Users/multicampus/Desktop/react2/27_UD/blog/blog-frontend/src/containers/post/PostViewerContainer.js"],"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","PostViewerContainer","match","history","postId","params","dispatch","post","loading","error","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA,QAC1CC,MAD0C,GAC/BF,KAAK,CAACG,MADyB,CAC1CD,MAD0C;AAElD,QAAME,QAAQ,GAAGb,WAAW,EAA5B;;AAFkD,uBAGXC,WAAW,CAAC,CAAC;AAAEa,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,MAAwB;AACzED,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAD8D;AAEzEE,IAAAA,KAAK,EAAEF,IAAI,CAACE,KAF6D;AAGzED,IAAAA,OAAO,EAAEA,OAAO,CAAC,gBAAD,CAHyD;AAIzEE,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAJ8D,GAAxB,CAAD,CAHA;AAAA,QAG1CH,IAH0C,gBAG1CA,IAH0C;AAAA,QAGpCE,KAHoC,gBAGpCA,KAHoC;AAAA,QAG7BD,OAH6B,gBAG7BA,OAH6B;AAAA,QAGpBE,IAHoB,gBAGpBA,IAHoB;;AAUlDlB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACV,QAAQ,CAACQ,MAAD,CAAT,CAAR;AACA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GALQ,EAKN,CAACS,QAAQ,CAACF,MAAV,CALM,CAAT;AAOA,SACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEG,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,aAAa,EAAE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAzBD;;AA2BA,eAAed,UAAU,CAACM,mBAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(({ post, loading }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading['post/READ_POST'],\r\n    user: user.user,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch.postId]);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={<PostActionButtons />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n"]},"metadata":{},"sourceType":"module"}